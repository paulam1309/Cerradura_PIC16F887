

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jun 20 19:48:35 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    32                           	dabs	1,0x7E,2
    33  0000                     
    34                           ; Version 2.20
    35                           ; Generated 12/02/2020 GMT
    36                           ; 
    37                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    38                           ; All rights reserved.
    39                           ; 
    40                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    41                           ; 
    42                           ; Redistribution and use in source and binary forms, with or without modification, are
    43                           ; permitted provided that the following conditions are met:
    44                           ; 
    45                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    46                           ;        conditions and the following disclaimer.
    47                           ; 
    48                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    49                           ;        of conditions and the following disclaimer in the documentation and/or other
    50                           ;        materials provided with the distribution.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC16F887 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68  0000                     	;# 
    69  0001                     	;# 
    70  0002                     	;# 
    71  0003                     	;# 
    72  0004                     	;# 
    73  0005                     	;# 
    74  0006                     	;# 
    75  0007                     	;# 
    76  0008                     	;# 
    77  0009                     	;# 
    78  000A                     	;# 
    79  000B                     	;# 
    80  000C                     	;# 
    81  000D                     	;# 
    82  000E                     	;# 
    83  000E                     	;# 
    84  000F                     	;# 
    85  0010                     	;# 
    86  0011                     	;# 
    87  0012                     	;# 
    88  0013                     	;# 
    89  0014                     	;# 
    90  0015                     	;# 
    91  0015                     	;# 
    92  0016                     	;# 
    93  0017                     	;# 
    94  0018                     	;# 
    95  0019                     	;# 
    96  001A                     	;# 
    97  001B                     	;# 
    98  001B                     	;# 
    99  001C                     	;# 
   100  001D                     	;# 
   101  001E                     	;# 
   102  001F                     	;# 
   103  0081                     	;# 
   104  0085                     	;# 
   105  0086                     	;# 
   106  0087                     	;# 
   107  0088                     	;# 
   108  0089                     	;# 
   109  008C                     	;# 
   110  008D                     	;# 
   111  008E                     	;# 
   112  008F                     	;# 
   113  0090                     	;# 
   114  0091                     	;# 
   115  0092                     	;# 
   116  0093                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0094                     	;# 
   120  0095                     	;# 
   121  0096                     	;# 
   122  0097                     	;# 
   123  0098                     	;# 
   124  0099                     	;# 
   125  009A                     	;# 
   126  009B                     	;# 
   127  009C                     	;# 
   128  009D                     	;# 
   129  009E                     	;# 
   130  009F                     	;# 
   131  0105                     	;# 
   132  0107                     	;# 
   133  0108                     	;# 
   134  0109                     	;# 
   135  010C                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  010F                     	;# 
   140  0185                     	;# 
   141  0187                     	;# 
   142  0188                     	;# 
   143  0189                     	;# 
   144  018C                     	;# 
   145  018D                     	;# 
   146  0000                     	;# 
   147  0001                     	;# 
   148  0002                     	;# 
   149  0003                     	;# 
   150  0004                     	;# 
   151  0005                     	;# 
   152  0006                     	;# 
   153  0007                     	;# 
   154  0008                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0088                     	;# 
   186  0089                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  008F                     	;# 
   191  0090                     	;# 
   192  0091                     	;# 
   193  0092                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0098                     	;# 
   202  0099                     	;# 
   203  009A                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  009F                     	;# 
   209  0105                     	;# 
   210  0107                     	;# 
   211  0108                     	;# 
   212  0109                     	;# 
   213  010C                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  010F                     	;# 
   218  0185                     	;# 
   219  0187                     	;# 
   220  0188                     	;# 
   221  0189                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  0000                     	;# 
   225  0001                     	;# 
   226  0002                     	;# 
   227  0003                     	;# 
   228  0004                     	;# 
   229  0005                     	;# 
   230  0006                     	;# 
   231  0007                     	;# 
   232  0008                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0088                     	;# 
   264  0089                     	;# 
   265  008C                     	;# 
   266  008D                     	;# 
   267  008E                     	;# 
   268  008F                     	;# 
   269  0090                     	;# 
   270  0091                     	;# 
   271  0092                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0093                     	;# 
   275  0094                     	;# 
   276  0095                     	;# 
   277  0096                     	;# 
   278  0097                     	;# 
   279  0098                     	;# 
   280  0099                     	;# 
   281  009A                     	;# 
   282  009B                     	;# 
   283  009C                     	;# 
   284  009D                     	;# 
   285  009E                     	;# 
   286  009F                     	;# 
   287  0105                     	;# 
   288  0107                     	;# 
   289  0108                     	;# 
   290  0109                     	;# 
   291  010C                     	;# 
   292  010C                     	;# 
   293  010D                     	;# 
   294  010E                     	;# 
   295  010F                     	;# 
   296  0185                     	;# 
   297  0187                     	;# 
   298  0188                     	;# 
   299  0189                     	;# 
   300  018C                     	;# 
   301  018D                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  000E                     	;# 
   318  000F                     	;# 
   319  0010                     	;# 
   320  0011                     	;# 
   321  0012                     	;# 
   322  0013                     	;# 
   323  0014                     	;# 
   324  0015                     	;# 
   325  0015                     	;# 
   326  0016                     	;# 
   327  0017                     	;# 
   328  0018                     	;# 
   329  0019                     	;# 
   330  001A                     	;# 
   331  001B                     	;# 
   332  001B                     	;# 
   333  001C                     	;# 
   334  001D                     	;# 
   335  001E                     	;# 
   336  001F                     	;# 
   337  0081                     	;# 
   338  0085                     	;# 
   339  0086                     	;# 
   340  0087                     	;# 
   341  0088                     	;# 
   342  0089                     	;# 
   343  008C                     	;# 
   344  008D                     	;# 
   345  008E                     	;# 
   346  008F                     	;# 
   347  0090                     	;# 
   348  0091                     	;# 
   349  0092                     	;# 
   350  0093                     	;# 
   351  0093                     	;# 
   352  0093                     	;# 
   353  0094                     	;# 
   354  0095                     	;# 
   355  0096                     	;# 
   356  0097                     	;# 
   357  0098                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009C                     	;# 
   362  009D                     	;# 
   363  009E                     	;# 
   364  009F                     	;# 
   365  0105                     	;# 
   366  0107                     	;# 
   367  0108                     	;# 
   368  0109                     	;# 
   369  010C                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0185                     	;# 
   375  0187                     	;# 
   376  0188                     	;# 
   377  0189                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380                           
   381                           	psect	idataBANK0
   382  00D4                     __pidataBANK0:
   383                           
   384                           ;initializer for _Password
   385  00D4  34B2               	retlw	178
   386  00D5  3404               	retlw	4
   387                           
   388                           	psect	strings
   389  0003                     __pstrings:
   390  0003                     stringtab:
   391  0003                     __stringtab:
   392                           
   393                           ;	String table - string pointers are 1 byte each
   394  0003  1BFF               	btfsc	btemp+1,7
   395  0004  280D               	ljmp	stringcode
   396  0005  1383               	bcf	3,7
   397  0006  187F               	btfsc	btemp+1,0
   398  0007  1783               	bsf	3,7
   399  0008  0800               	movf	0,w
   400  0009  0A84               	incf	4,f
   401  000A  1903               	skipnz
   402  000B  0AFF               	incf	btemp+1,f
   403  000C  0008               	return
   404  000D                     stringcode:
   405  000D                     stringdir:
   406  000D  3000               	movlw	high stringdir
   407  000E  008A               	movwf	10
   408  000F  0804               	movf	4,w
   409  0010  0A84               	incf	4,f
   410  0011  0782               	addwf	2,f
   411  0012                     __stringbase:
   412  0012  3400               	retlw	0
   413  0013                     __end_of__stringtab:
   414  0013                     _dpowers:
   415  0013  3401               	retlw	1
   416  0014  3400               	retlw	0
   417  0015  340A               	retlw	10
   418  0016  3400               	retlw	0
   419  0017  3464               	retlw	100
   420  0018  3400               	retlw	0
   421  0019  34E8               	retlw	232
   422  001A  3403               	retlw	3
   423  001B  3410               	retlw	16
   424  001C  3427               	retlw	39
   425  001D                     __end_of_dpowers:
   426  0006                     _PORTB	set	6
   427  0007                     _PORTC	set	7
   428  0008                     _PORTD	set	8
   429  0036                     _RB6	set	54
   430  0035                     _RB5	set	53
   431  0034                     _RB4	set	52
   432  003A                     _RC2	set	58
   433  0039                     _RC1	set	57
   434  0038                     _RC0	set	56
   435  0043                     _RD3	set	67
   436  0042                     _RD2	set	66
   437  0047                     _RD7	set	71
   438  0046                     _RD6	set	70
   439  0045                     _RD5	set	69
   440  0044                     _RD4	set	68
   441  0086                     _TRISB	set	134
   442  0087                     _TRISC	set	135
   443  0088                     _TRISD	set	136
   444  001D                     STR_3:
   445  001D  3450               	retlw	80	;'P'
   446  001E  3472               	retlw	114	;'r'
   447  001F  3469               	retlw	105	;'i'
   448  0020  346D               	retlw	109	;'m'
   449  0021  3465               	retlw	101	;'e'
   450  0022  3472               	retlw	114	;'r'
   451  0023  3420               	retlw	32	;' '
   452  0024  3464               	retlw	100	;'d'
   453  0025  3469               	retlw	105	;'i'
   454  0026  3467               	retlw	103	;'g'
   455  0027  3469               	retlw	105	;'i'
   456  0028  3474               	retlw	116	;'t'
   457  0029  346F               	retlw	111	;'o'
   458  002A  343A               	retlw	58	;':'
   459  002B  3420               	retlw	32	;' '
   460  002C  3425               	retlw	37	;'%'
   461  002D  3469               	retlw	105	;'i'
   462  002E  3400               	retlw	0
   463  002F                     STR_4:
   464  002F  3453               	retlw	83	;'S'
   465  0030  3465               	retlw	101	;'e'
   466  0031  3467               	retlw	103	;'g'
   467  0032  3475               	retlw	117	;'u'
   468  0033  346E               	retlw	110	;'n'
   469  0034  3464               	retlw	100	;'d'
   470  0035  346F               	retlw	111	;'o'
   471  0036  3420               	retlw	32	;' '
   472  0037  3464               	retlw	100	;'d'
   473  0038  3469               	retlw	105	;'i'
   474  0039  3467               	retlw	103	;'g'
   475  003A  3469               	retlw	105	;'i'
   476  003B  3474               	retlw	116	;'t'
   477  003C  346F               	retlw	111	;'o'
   478  003D  3420               	retlw	32	;' '
   479  003E  3425               	retlw	37	;'%'
   480  003F  3469               	retlw	105	;'i'
   481  0040  3400               	retlw	0
   482  0041                     STR_5:
   483  0041  3454               	retlw	84	;'T'
   484  0042  3465               	retlw	101	;'e'
   485  0043  3472               	retlw	114	;'r'
   486  0044  3463               	retlw	99	;'c'
   487  0045  3465               	retlw	101	;'e'
   488  0046  3472               	retlw	114	;'r'
   489  0047  3420               	retlw	32	;' '
   490  0048  3444               	retlw	68	;'D'
   491  0049  3469               	retlw	105	;'i'
   492  004A  3467               	retlw	103	;'g'
   493  004B  3469               	retlw	105	;'i'
   494  004C  3474               	retlw	116	;'t'
   495  004D  346F               	retlw	111	;'o'
   496  004E  3420               	retlw	32	;' '
   497  004F  3425               	retlw	37	;'%'
   498  0050  3469               	retlw	105	;'i'
   499  0051  3400               	retlw	0
   500  0052                     STR_6:
   501  0052  3443               	retlw	67	;'C'
   502  0053  3475               	retlw	117	;'u'
   503  0054  3461               	retlw	97	;'a'
   504  0055  3472               	retlw	114	;'r'
   505  0056  3474               	retlw	116	;'t'
   506  0057  346F               	retlw	111	;'o'
   507  0058  3420               	retlw	32	;' '
   508  0059  3464               	retlw	100	;'d'
   509  005A  3469               	retlw	105	;'i'
   510  005B  3467               	retlw	103	;'g'
   511  005C  3469               	retlw	105	;'i'
   512  005D  3474               	retlw	116	;'t'
   513  005E  346F               	retlw	111	;'o'
   514  005F  3420               	retlw	32	;' '
   515  0060  3425               	retlw	37	;'%'
   516  0061  3469               	retlw	105	;'i'
   517  0062  3400               	retlw	0
   518  0063                     STR_12:
   519  0063  3449               	retlw	73	;'I'
   520  0064  346E               	retlw	110	;'n'
   521  0065  3474               	retlw	116	;'t'
   522  0066  3465               	retlw	101	;'e'
   523  0067  346E               	retlw	110	;'n'
   524  0068  3474               	retlw	116	;'t'
   525  0069  3465               	retlw	101	;'e'
   526  006A  3420               	retlw	32	;' '
   527  006B  3464               	retlw	100	;'d'
   528  006C  3465               	retlw	101	;'e'
   529  006D  3420               	retlw	32	;' '
   530  006E  346E               	retlw	110	;'n'
   531  006F  3475               	retlw	117	;'u'
   532  0070  3465               	retlw	101	;'e'
   533  0071  3476               	retlw	118	;'v'
   534  0072  346F               	retlw	111	;'o'
   535  0073  3400               	retlw	0
   536  0074                     STR_14:
   537  0074  3449               	retlw	73	;'I'
   538  0075  346E               	retlw	110	;'n'
   539  0076  3467               	retlw	103	;'g'
   540  0077  3472               	retlw	114	;'r'
   541  0078  3465               	retlw	101	;'e'
   542  0079  3473               	retlw	115	;'s'
   543  007A  3465               	retlw	101	;'e'
   544  007B  3420               	retlw	32	;' '
   545  007C  3463               	retlw	99	;'c'
   546  007D  346C               	retlw	108	;'l'
   547  007E  3461               	retlw	97	;'a'
   548  007F  3476               	retlw	118	;'v'
   549  0080  3465               	retlw	101	;'e'
   550  0081  3400               	retlw	0
   551  0082                     STR_2:
   552  0082  3445               	retlw	69	;'E'
   553  0083  346C               	retlw	108	;'l'
   554  0084  3465               	retlw	101	;'e'
   555  0085  3463               	retlw	99	;'c'
   556  0086  3474               	retlw	116	;'t'
   557  0087  3472               	retlw	114	;'r'
   558  0088  346F               	retlw	111	;'o'
   559  0089  346E               	retlw	110	;'n'
   560  008A  3469               	retlw	105	;'i'
   561  008B  3463               	retlw	99	;'c'
   562  008C  3461               	retlw	97	;'a'
   563  008D  3400               	retlw	0
   564  008E                     STR_13:
   565  008E  3450               	retlw	80	;'P'
   566  008F  3472               	retlw	114	;'r'
   567  0090  3465               	retlw	101	;'e'
   568  0091  3473               	retlw	115	;'s'
   569  0092  3469               	retlw	105	;'i'
   570  0093  346F               	retlw	111	;'o'
   571  0094  346E               	retlw	110	;'n'
   572  0095  3465               	retlw	101	;'e'
   573  0096  3420               	retlw	32	;' '
   574  0097  3423               	retlw	35	;'#'
   575  0098  3400               	retlw	0
   576  0099                     STR_9:
   577  0099  3443               	retlw	67	;'C'
   578  009A  346F               	retlw	111	;'o'
   579  009B  346E               	retlw	110	;'n'
   580  009C  3474               	retlw	116	;'t'
   581  009D  3472               	retlw	114	;'r'
   582  009E  3461               	retlw	97	;'a'
   583  009F  3473               	retlw	115	;'s'
   584  00A0  3465               	retlw	101	;'e'
   585  00A1  34F1               	retlw	-15
   586  00A2  3461               	retlw	97	;'a'
   587  00A3  3400               	retlw	0
   588  00A4                     STR_10:
   589  00A4  3449               	retlw	73	;'I'
   590  00A5  346E               	retlw	110	;'n'
   591  00A6  3463               	retlw	99	;'c'
   592  00A7  346F               	retlw	111	;'o'
   593  00A8  3472               	retlw	114	;'r'
   594  00A9  3472               	retlw	114	;'r'
   595  00AA  3465               	retlw	101	;'e'
   596  00AB  3463               	retlw	99	;'c'
   597  00AC  3474               	retlw	116	;'t'
   598  00AD  3461               	retlw	97	;'a'
   599  00AE  3400               	retlw	0
   600  00AF                     STR_11:
   601  00AF  3442               	retlw	66	;'B'
   602  00B0  346C               	retlw	108	;'l'
   603  00B1  346F               	retlw	111	;'o'
   604  00B2  3471               	retlw	113	;'q'
   605  00B3  3475               	retlw	117	;'u'
   606  00B4  3465               	retlw	101	;'e'
   607  00B5  3461               	retlw	97	;'a'
   608  00B6  3464               	retlw	100	;'d'
   609  00B7  3461               	retlw	97	;'a'
   610  00B8  3400               	retlw	0
   611  00B9                     STR_1:
   612  00B9  3443               	retlw	67	;'C'
   613  00BA  3465               	retlw	101	;'e'
   614  00BB  3472               	retlw	114	;'r'
   615  00BC  3472               	retlw	114	;'r'
   616  00BD  3461               	retlw	97	;'a'
   617  00BE  3464               	retlw	100	;'d'
   618  00BF  3475               	retlw	117	;'u'
   619  00C0  3472               	retlw	114	;'r'
   620  00C1  3461               	retlw	97	;'a'
   621  00C2  3400               	retlw	0
   622  00C3                     STR_15:
   623  00C3  344F               	retlw	79	;'O'
   624  00C4  3474               	retlw	116	;'t'
   625  00C5  3472               	retlw	114	;'r'
   626  00C6  3461               	retlw	97	;'a'
   627  00C7  3420               	retlw	32	;' '
   628  00C8  3476               	retlw	118	;'v'
   629  00C9  3465               	retlw	101	;'e'
   630  00CA  347A               	retlw	122	;'z'
   631  00CB  3400               	retlw	0
   632  00CC                     STR_8:
   633  00CC  3441               	retlw	65	;'A'
   634  00CD  3462               	retlw	98	;'b'
   635  00CE  3469               	retlw	105	;'i'
   636  00CF  3465               	retlw	101	;'e'
   637  00D0  3472               	retlw	114	;'r'
   638  00D1  3474               	retlw	116	;'t'
   639  00D2  3461               	retlw	97	;'a'
   640  00D3  3400               	retlw	0
   641  00B9                     
   642                           	psect	cinit
   643  07E7                     start_initialization:	
   644                           ; #config settings
   645                           
   646  07E7                     __initialization:
   647                           
   648                           ; Initialize objects allocated to BANK0
   649  07E7  120A  118A  20D4  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   650  07EC  00D9               	movwf	__pdataBANK0& (0+127)
   651  07ED  120A  118A  20D5  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   652  07F2  00DA               	movwf	(__pdataBANK0+1)& (0+127)
   653                           
   654                           ; Clear objects allocated to BANK0
   655  07F3  1383               	bcf	3,7	;select IRP bank0
   656  07F4  3045               	movlw	low __pbssBANK0
   657  07F5  0084               	movwf	4
   658  07F6  3059               	movlw	low (__pbssBANK0+20)
   659  07F7  120A  158A  278B  120A  118A  	fcall	clear_ram0
   660  07FC                     end_of_initialization:	
   661                           ;End of C runtime variable initialization code
   662                           
   663  07FC                     __end_of__initialization:
   664  07FC  0183               	clrf	3
   665  07FD  120A  118A  2C5A   	ljmp	_main	;jump to C main() function
   666                           
   667                           	psect	bssBANK0
   668  0045                     __pbssBANK0:
   669  0045                     _x:
   670  0045                     	ds	2
   671  0047                     _Bandera:
   672  0047                     	ds	2
   673  0049                     _Tecla:
   674  0049                     	ds	2
   675  004B                     _Clave:
   676  004B                     	ds	2
   677  004D                     _XM:
   678  004D                     	ds	2
   679  004F                     _XC:
   680  004F                     	ds	2
   681  0051                     _XD:
   682  0051                     	ds	2
   683  0053                     _X:
   684  0053                     	ds	2
   685  0055                     _True:
   686  0055                     	ds	2
   687  0057                     _Try:
   688  0057                     	ds	2
   689                           
   690                           	psect	dataBANK0
   691  0059                     __pdataBANK0:
   692  0059                     _Password:
   693  0059                     	ds	2
   694                           
   695                           	psect	clrtext
   696  0F8B                     clear_ram0:	
   697                           ;	Called with FSR containing the base address, and
   698                           ;	W with the last address+1
   699                           
   700  0F8B  0064               	clrwdt	;clear the watchdog before getting into this loop
   701  0F8C                     clrloop0:
   702  0F8C  0180               	clrf	0	;clear RAM location pointed to by FSR
   703  0F8D  0A84               	incf	4,f	;increment pointer
   704  0F8E  0604               	xorwf	4,w	;XOR with final address
   705  0F8F  1903               	btfsc	3,2	;have we reached the end yet?
   706  0F90  3400               	retlw	0	;all done for this memory range, return
   707  0F91  0604               	xorwf	4,w	;XOR again to restore value
   708  0F92  2F8C               	goto	clrloop0	;do the next byte
   709                           
   710                           	psect	cstackCOMMON
   711  0070                     __pcstackCOMMON:
   712  0070                     ?_Leer_tecla:
   713  0070                     ??_Leer_tecla:	
   714                           ; 1 bytes @ 0x0
   715                           
   716  0070                     ?_Lcd_Port:	
   717                           ; 1 bytes @ 0x0
   718                           
   719  0070                     ??_Lcd_Port:	
   720                           ; 1 bytes @ 0x0
   721                           
   722  0070                     ?_Lcd_Cmd:	
   723                           ; 1 bytes @ 0x0
   724                           
   725  0070                     ?_Lcd_Clear:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0070                     ?_Lcd_Init:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0070                     ?_Lcd_Write_Char:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0070                     ?_Prender_Verde:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0070                     ??_Prender_Verde:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0070                     ?_Apagar_Verde:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0070                     ??_Apagar_Verde:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0070                     ?_Prender_Rojo:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0070                     ??_Prender_Rojo:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0070                     ?_Apagar_Rojo:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0070                     ??_Apagar_Rojo:	
   756                           ; 1 bytes @ 0x0
   757                           
   758  0070                     ?_pulsar_boton:	
   759                           ; 1 bytes @ 0x0
   760                           
   761  0070                     ??_pulsar_boton:	
   762                           ; 1 bytes @ 0x0
   763                           
   764  0070                     ?_alarma:	
   765                           ; 1 bytes @ 0x0
   766                           
   767  0070                     ??_alarma:	
   768                           ; 1 bytes @ 0x0
   769                           
   770  0070                     ?_main:	
   771                           ; 1 bytes @ 0x0
   772                           
   773  0070                     ?___wmul:	
   774                           ; 2 bytes @ 0x0
   775                           
   776  0070                     ?___lwdiv:	
   777                           ; 2 bytes @ 0x0
   778                           
   779  0070                     Lcd_Port@a:	
   780                           ; 2 bytes @ 0x0
   781                           
   782  0070                     ___wmul@multiplier:	
   783                           ; 1 bytes @ 0x0
   784                           
   785  0070                     ___lwdiv@divisor:	
   786                           ; 2 bytes @ 0x0
   787                           
   788                           
   789                           ; 2 bytes @ 0x0
   790  0070                     	ds	1
   791  0071                     ??_Lcd_Cmd:
   792  0071                     ??_Lcd_Write_Char:	
   793                           ; 1 bytes @ 0x1
   794                           
   795                           
   796                           ; 1 bytes @ 0x1
   797  0071                     	ds	1
   798  0072                     Lcd_Write_Char@temp:
   799  0072                     ___wmul@multiplicand:	
   800                           ; 1 bytes @ 0x2
   801                           
   802  0072                     ___lwdiv@dividend:	
   803                           ; 2 bytes @ 0x2
   804                           
   805                           
   806                           ; 2 bytes @ 0x2
   807  0072                     	ds	1
   808  0073                     Lcd_Cmd@a:
   809  0073                     Lcd_Write_Char@y:	
   810                           ; 1 bytes @ 0x3
   811                           
   812  0073                     alarma@a:	
   813                           ; 1 bytes @ 0x3
   814                           
   815                           
   816                           ; 2 bytes @ 0x3
   817  0073                     	ds	1
   818  0074                     ??_Lcd_Clear:
   819  0074                     ?_Lcd_Set_Cursor:	
   820                           ; 1 bytes @ 0x4
   821                           
   822  0074                     ??_Lcd_Init:	
   823                           ; 1 bytes @ 0x4
   824                           
   825  0074                     ??___wmul:	
   826                           ; 1 bytes @ 0x4
   827                           
   828  0074                     ??___lwdiv:	
   829                           ; 1 bytes @ 0x4
   830                           
   831  0074                     Lcd_Set_Cursor@b:	
   832                           ; 1 bytes @ 0x4
   833                           
   834  0074                     Lcd_Write_Char@a:	
   835                           ; 1 bytes @ 0x4
   836                           
   837  0074                     ___wmul@product:	
   838                           ; 1 bytes @ 0x4
   839                           
   840                           
   841                           ; 2 bytes @ 0x4
   842  0074                     	ds	1
   843  0075                     ??_Lcd_Set_Cursor:
   844  0075                     ?_Lcd_Write_String:	
   845                           ; 1 bytes @ 0x5
   846                           
   847  0075                     Lcd_Write_String@a:	
   848                           ; 1 bytes @ 0x5
   849                           
   850  0075                     ___lwdiv@quotient:	
   851                           ; 2 bytes @ 0x5
   852                           
   853                           
   854                           ; 2 bytes @ 0x5
   855  0075                     	ds	2
   856  0077                     ??_Lcd_Write_String:
   857  0077                     Lcd_Set_Cursor@a:	
   858                           ; 1 bytes @ 0x7
   859                           
   860  0077                     ___lwdiv@counter:	
   861                           ; 1 bytes @ 0x7
   862                           
   863                           
   864                           ; 1 bytes @ 0x7
   865  0077                     	ds	1
   866  0078                     ?___lwmod:
   867  0078                     Lcd_Set_Cursor@z:	
   868                           ; 2 bytes @ 0x8
   869                           
   870  0078                     ___lwmod@divisor:	
   871                           ; 1 bytes @ 0x8
   872                           
   873                           
   874                           ; 2 bytes @ 0x8
   875  0078                     	ds	1
   876  0079                     Lcd_Set_Cursor@y:
   877                           
   878                           ; 1 bytes @ 0x9
   879  0079                     	ds	1
   880  007A                     Lcd_Set_Cursor@temp:
   881  007A                     Lcd_Write_String@i:	
   882                           ; 1 bytes @ 0xA
   883                           
   884  007A                     ___lwmod@dividend:	
   885                           ; 2 bytes @ 0xA
   886                           
   887                           
   888                           ; 2 bytes @ 0xA
   889  007A                     	ds	2
   890  007C                     ??___lwmod:
   891                           
   892                           ; 1 bytes @ 0xC
   893  007C                     	ds	1
   894  007D                     ___lwmod@counter:
   895                           
   896                           ; 1 bytes @ 0xD
   897  007D                     	ds	1
   898                           
   899                           	psect	cstackBANK0
   900  0020                     __pcstackBANK0:
   901  0020                     ?_sprintf:
   902  0020                     sprintf@f:	
   903                           ; 2 bytes @ 0x0
   904                           
   905                           
   906                           ; 1 bytes @ 0x0
   907  0020                     	ds	3
   908  0023                     ??_sprintf:
   909                           
   910                           ; 1 bytes @ 0x3
   911  0023                     	ds	3
   912  0026                     sprintf@ap:
   913                           
   914                           ; 1 bytes @ 0x6
   915  0026                     	ds	1
   916  0027                     sprintf@flag:
   917                           
   918                           ; 1 bytes @ 0x7
   919  0027                     	ds	1
   920  0028                     sprintf@prec:
   921                           
   922                           ; 1 bytes @ 0x8
   923  0028                     	ds	1
   924  0029                     sprintf@val:
   925                           
   926                           ; 2 bytes @ 0x9
   927  0029                     	ds	2
   928  002B                     sprintf@sp:
   929                           
   930                           ; 1 bytes @ 0xB
   931  002B                     	ds	1
   932  002C                     sprintf@c:
   933                           
   934                           ; 1 bytes @ 0xC
   935  002C                     	ds	1
   936  002D                     ??_main:
   937                           
   938                           ; 1 bytes @ 0xD
   939  002D                     	ds	4
   940  0031                     main@Cadena:
   941                           
   942                           ; 20 bytes @ 0x11
   943  0031                     	ds	20
   944                           
   945                           	psect	maintext
   946  045A                     __pmaintext:	
   947 ;;
   948 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   949 ;;
   950 ;; *************** function _main *****************
   951 ;; Defined at:
   952 ;;		line 49 in file "main.c"
   953 ;; Parameters:    Size  Location     Type
   954 ;;		None
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  Cadena         20   17[BANK0 ] unsigned char [20]
   957 ;; Return value:  Size  Location     Type
   958 ;;                  2  131[None  ] int 
   959 ;; Registers used:
   960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   961 ;; Tracked objects:
   962 ;;		On entry : B00/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   966 ;;      Params:         0       0       0       0       0
   967 ;;      Locals:         0      20       0       0       0
   968 ;;      Temps:          0       4       0       0       0
   969 ;;      Totals:         0      24       0       0       0
   970 ;;Total ram usage:       24 bytes
   971 ;; Hardware stack levels required when called: 3
   972 ;; This function calls:
   973 ;;		_Apagar_Rojo
   974 ;;		_Apagar_Verde
   975 ;;		_Lcd_Clear
   976 ;;		_Lcd_Init
   977 ;;		_Lcd_Set_Cursor
   978 ;;		_Lcd_Write_String
   979 ;;		_Leer_tecla
   980 ;;		_Prender_Rojo
   981 ;;		_Prender_Verde
   982 ;;		___wmul
   983 ;;		_alarma
   984 ;;		_pulsar_boton
   985 ;;		_sprintf
   986 ;; This function is called by:
   987 ;;		Startup code after reset
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991  045A                     _main:	
   992                           ;psect for function _main
   993                           
   994  045A                     l1552:	
   995                           ;incstack = 0
   996                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   997                           
   998                           
   999                           ;main.c: 51:   char Cadena[20];;main.c: 52:   TRISD = 0x00;
  1000  045A  1683               	bsf	3,5	;RP0=1, select bank1
  1001  045B  1303               	bcf	3,6	;RP1=0, select bank1
  1002  045C  0188               	clrf	8	;volatile
  1003                           
  1004                           ;main.c: 53:   TRISC = 0x00;
  1005  045D  0187               	clrf	7	;volatile
  1006  045E                     l1554:
  1007                           
  1008                           ;main.c: 54:   TRISB = 0xF0;
  1009  045E  30F0               	movlw	240
  1010  045F  0086               	movwf	6	;volatile
  1011  0460                     l1556:
  1012                           
  1013                           ;main.c: 55:   PORTD = 0;
  1014  0460  1283               	bcf	3,5	;RP0=0, select bank0
  1015  0461  1303               	bcf	3,6	;RP1=0, select bank0
  1016  0462  0188               	clrf	8	;volatile
  1017  0463                     l1558:
  1018                           
  1019                           ;main.c: 56:   PORTC = 0;
  1020  0463  0187               	clrf	7	;volatile
  1021  0464                     l1560:
  1022                           
  1023                           ;main.c: 57:   PORTB = 0;
  1024  0464  0186               	clrf	6	;volatile
  1025  0465                     l1562:
  1026                           
  1027                           ;main.c: 59:   Lcd_Init();
  1028  0465  120A  118A  2273  120A  118A  	fcall	_Lcd_Init
  1029  046A                     l1564:
  1030                           
  1031                           ;main.c: 60:   Lcd_Clear();
  1032  046A  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1033  046F                     l1566:
  1034                           
  1035                           ;main.c: 61:   Lcd_Set_Cursor(1,4);
  1036  046F  3004               	movlw	4
  1037  0470  1283               	bcf	3,5	;RP0=0, select bank0
  1038  0471  1303               	bcf	3,6	;RP1=0, select bank0
  1039  0472  00AD               	movwf	??_main
  1040  0473  082D               	movf	??_main,w
  1041  0474  00F4               	movwf	Lcd_Set_Cursor@b
  1042  0475  3001               	movlw	1
  1043  0476  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1044  047B                     l1568:
  1045                           
  1046                           ;main.c: 62:   Lcd_Write_String("Cerradura");
  1047  047B  30A7               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1048  047C  00F5               	movwf	Lcd_Write_String@a
  1049  047D  3080               	movlw	128
  1050  047E  00F6               	movwf	Lcd_Write_String@a+1
  1051  047F  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1052  0484                     l1570:
  1053                           
  1054                           ;main.c: 63:   Lcd_Set_Cursor(2,3);
  1055  0484  3003               	movlw	3
  1056  0485  1283               	bcf	3,5	;RP0=0, select bank0
  1057  0486  1303               	bcf	3,6	;RP1=0, select bank0
  1058  0487  00AD               	movwf	??_main
  1059  0488  082D               	movf	??_main,w
  1060  0489  00F4               	movwf	Lcd_Set_Cursor@b
  1061  048A  3002               	movlw	2
  1062  048B  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1063  0490                     l1572:
  1064                           
  1065                           ;main.c: 64:   Lcd_Write_String("Electronica");
  1066  0490  3070               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1067  0491  00F5               	movwf	Lcd_Write_String@a
  1068  0492  3080               	movlw	128
  1069  0493  00F6               	movwf	Lcd_Write_String@a+1
  1070  0494  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1071  0499                     l1574:
  1072                           
  1073                           ;main.c: 65:   Prender_Rojo();
  1074  0499  120A  158A  2787  120A  118A  	fcall	_Prender_Rojo
  1075  049E                     l1576:
  1076                           
  1077                           ;main.c: 66:    _delay((unsigned long)((1000)*(4000000/4000.0)));
  1078  049E  3006               	movlw	6
  1079  049F  1283               	bcf	3,5	;RP0=0, select bank0
  1080  04A0  1303               	bcf	3,6	;RP1=0, select bank0
  1081  04A1  00AF               	movwf	??_main+2
  1082  04A2  3013               	movlw	19
  1083  04A3  00AE               	movwf	??_main+1
  1084  04A4  30AD               	movlw	173
  1085  04A5  00AD               	movwf	??_main
  1086  04A6                     u1257:
  1087  04A6  0BAD               	decfsz	??_main,f
  1088  04A7  2CA6               	goto	u1257
  1089  04A8  0BAE               	decfsz	??_main+1,f
  1090  04A9  2CA6               	goto	u1257
  1091  04AA  0BAF               	decfsz	??_main+2,f
  1092  04AB  2CA6               	goto	u1257
  1093                           
  1094                           ;main.c: 69:   while((Try < 3) && (True == 0) ){
  1095  04AC  2FCD               	goto	l1732
  1096  04AD                     l1578:
  1097                           
  1098                           ;main.c: 70:     Apagar_Verde();
  1099  04AD  120A  158A  2783  120A  118A  	fcall	_Apagar_Verde
  1100  04B2                     l1580:
  1101                           
  1102                           ;main.c: 74:     Tecla= Leer_tecla();
  1103  04B2  120A  118A  22D0  120A  118A  	fcall	_Leer_tecla
  1104  04B7  1283               	bcf	3,5	;RP0=0, select bank0
  1105  04B8  1303               	bcf	3,6	;RP1=0, select bank0
  1106  04B9  00AD               	movwf	??_main
  1107  04BA  01AE               	clrf	??_main+1
  1108  04BB  082D               	movf	??_main,w
  1109  04BC  00C9               	movwf	_Tecla
  1110  04BD  082E               	movf	??_main+1,w
  1111  04BE  00CA               	movwf	_Tecla+1
  1112  04BF                     l1582:
  1113                           
  1114                           ;main.c: 76:       if((Tecla != 100) && (Tecla!=42) && (Tecla!=35) ){
  1115  04BF  3064               	movlw	100
  1116  04C0  0649               	xorwf	_Tecla,w
  1117  04C1  044A               	iorwf	_Tecla+1,w
  1118  04C2  1903               	btfsc	3,2
  1119  04C3  2CC5               	goto	u1121
  1120  04C4  2CC6               	goto	u1120
  1121  04C5                     u1121:
  1122  04C5  2E4B               	goto	l1656
  1123  04C6                     u1120:
  1124  04C6                     l1584:
  1125  04C6  302A               	movlw	42
  1126  04C7  0649               	xorwf	_Tecla,w
  1127  04C8  044A               	iorwf	_Tecla+1,w
  1128  04C9  1903               	btfsc	3,2
  1129  04CA  2CCC               	goto	u1131
  1130  04CB  2CCD               	goto	u1130
  1131  04CC                     u1131:
  1132  04CC  2E4B               	goto	l1656
  1133  04CD                     u1130:
  1134  04CD                     l1586:
  1135  04CD  3023               	movlw	35
  1136  04CE  0649               	xorwf	_Tecla,w
  1137  04CF  044A               	iorwf	_Tecla+1,w
  1138  04D0  1903               	btfsc	3,2
  1139  04D1  2CD3               	goto	u1141
  1140  04D2  2CD4               	goto	u1140
  1141  04D3                     u1141:
  1142  04D3  2E4B               	goto	l1656
  1143  04D4                     u1140:
  1144  04D4                     l1588:
  1145                           
  1146                           ;main.c: 77:           if (Bandera==0){
  1147  04D4  0847               	movf	_Bandera,w
  1148  04D5  0448               	iorwf	_Bandera+1,w
  1149  04D6  1D03               	btfss	3,2
  1150  04D7  2CD9               	goto	u1151
  1151  04D8  2CDA               	goto	u1150
  1152  04D9                     u1151:
  1153  04D9  2D2F               	goto	l1604
  1154  04DA                     u1150:
  1155  04DA                     l1590:
  1156                           
  1157                           ;main.c: 78:               pulsar_boton();
  1158  04DA  120A  158A  27A0  120A  118A  	fcall	_pulsar_boton
  1159  04DF                     l1592:
  1160                           
  1161                           ;main.c: 79:               sprintf (Cadena, "Primer digito: %i", Tecla);
  1162  04DF  300B               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1163  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  1164  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  1165  04E2  00AD               	movwf	??_main
  1166  04E3  082D               	movf	??_main,w
  1167  04E4  00A0               	movwf	sprintf@f
  1168  04E5  084A               	movf	_Tecla+1,w
  1169  04E6  00A2               	movwf	?_sprintf+2
  1170  04E7  0849               	movf	_Tecla,w
  1171  04E8  00A1               	movwf	?_sprintf+1
  1172  04E9  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1173  04EA  120A  118A  2372  120A  118A  	fcall	_sprintf
  1174  04EF                     l1594:
  1175                           
  1176                           ;main.c: 80:                Lcd_Clear();
  1177  04EF  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1178  04F4                     l1596:
  1179                           
  1180                           ;main.c: 81:                Lcd_Set_Cursor(1,1);
  1181  04F4  01F4               	clrf	Lcd_Set_Cursor@b
  1182  04F5  0AF4               	incf	Lcd_Set_Cursor@b,f
  1183  04F6  3001               	movlw	1
  1184  04F7  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1185  04FC                     l1598:
  1186                           
  1187                           ;main.c: 82:                Lcd_Write_String(Cadena);
  1188  04FC  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1189  04FD  00F5               	movwf	Lcd_Write_String@a
  1190  04FE  3000               	movlw	0
  1191  04FF  00F6               	movwf	Lcd_Write_String@a+1
  1192  0500  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1193  0505                     l1600:
  1194                           
  1195                           ;main.c: 83:                _delay((unsigned long)((500)*(4000000/4000.0)));
  1196  0505  3003               	movlw	3
  1197  0506  1283               	bcf	3,5	;RP0=0, select bank0
  1198  0507  1303               	bcf	3,6	;RP1=0, select bank0
  1199  0508  00AF               	movwf	??_main+2
  1200  0509  308A               	movlw	138
  1201  050A  00AE               	movwf	??_main+1
  1202  050B  3055               	movlw	85
  1203  050C  00AD               	movwf	??_main
  1204  050D                     u1267:
  1205  050D  0BAD               	decfsz	??_main,f
  1206  050E  2D0D               	goto	u1267
  1207  050F  0BAE               	decfsz	??_main+1,f
  1208  0510  2D0D               	goto	u1267
  1209  0511  0BAF               	decfsz	??_main+2,f
  1210  0512  2D0D               	goto	u1267
  1211  0513                     l1602:
  1212                           
  1213                           ;main.c: 85:                XM = Tecla * 1000;
  1214  0513  1283               	bcf	3,5	;RP0=0, select bank0
  1215  0514  1303               	bcf	3,6	;RP1=0, select bank0
  1216  0515  084A               	movf	_Tecla+1,w
  1217  0516  00F1               	movwf	___wmul@multiplier+1
  1218  0517  0849               	movf	_Tecla,w
  1219  0518  00F0               	movwf	___wmul@multiplier
  1220  0519  30E8               	movlw	232
  1221  051A  00F2               	movwf	___wmul@multiplicand
  1222  051B  3003               	movlw	3
  1223  051C  00F3               	movwf	___wmul@multiplicand+1
  1224  051D  120A  158A  27DB  120A  118A  	fcall	___wmul
  1225  0522  0871               	movf	?___wmul+1,w
  1226  0523  1283               	bcf	3,5	;RP0=0, select bank0
  1227  0524  1303               	bcf	3,6	;RP1=0, select bank0
  1228  0525  00CE               	movwf	_XM+1
  1229  0526  0870               	movf	?___wmul,w
  1230  0527  00CD               	movwf	_XM
  1231                           
  1232                           ;main.c: 86:                Bandera ++;
  1233  0528  3001               	movlw	1
  1234  0529  07C7               	addwf	_Bandera,f
  1235  052A  1803               	skipnc
  1236  052B  0AC8               	incf	_Bandera+1,f
  1237  052C  3000               	movlw	0
  1238  052D  07C8               	addwf	_Bandera+1,f
  1239                           
  1240                           ;main.c: 88:            }
  1241  052E  2E33               	goto	l1654
  1242  052F                     l1604:
  1243  052F  0347               	decf	_Bandera,w
  1244  0530  0448               	iorwf	_Bandera+1,w
  1245  0531  1D03               	btfss	3,2
  1246  0532  2D34               	goto	u1161
  1247  0533  2D35               	goto	u1160
  1248  0534                     u1161:
  1249  0534  2D8A               	goto	l1620
  1250  0535                     u1160:
  1251  0535                     l1606:
  1252                           
  1253                           ;main.c: 91:                pulsar_boton();
  1254  0535  120A  158A  27A0  120A  118A  	fcall	_pulsar_boton
  1255  053A                     l1608:
  1256                           
  1257                           ;main.c: 92:                sprintf (Cadena, "Segundo digito %i", Tecla);
  1258  053A  301D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1259  053B  1283               	bcf	3,5	;RP0=0, select bank0
  1260  053C  1303               	bcf	3,6	;RP1=0, select bank0
  1261  053D  00AD               	movwf	??_main
  1262  053E  082D               	movf	??_main,w
  1263  053F  00A0               	movwf	sprintf@f
  1264  0540  084A               	movf	_Tecla+1,w
  1265  0541  00A2               	movwf	?_sprintf+2
  1266  0542  0849               	movf	_Tecla,w
  1267  0543  00A1               	movwf	?_sprintf+1
  1268  0544  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1269  0545  120A  118A  2372  120A  118A  	fcall	_sprintf
  1270  054A                     l1610:
  1271                           
  1272                           ;main.c: 93:                Lcd_Clear();
  1273  054A  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1274  054F                     l1612:
  1275                           
  1276                           ;main.c: 94:                Lcd_Set_Cursor(1,1);
  1277  054F  01F4               	clrf	Lcd_Set_Cursor@b
  1278  0550  0AF4               	incf	Lcd_Set_Cursor@b,f
  1279  0551  3001               	movlw	1
  1280  0552  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1281  0557                     l1614:
  1282                           
  1283                           ;main.c: 95:                Lcd_Write_String(Cadena);
  1284  0557  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1285  0558  00F5               	movwf	Lcd_Write_String@a
  1286  0559  3000               	movlw	0
  1287  055A  00F6               	movwf	Lcd_Write_String@a+1
  1288  055B  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1289  0560                     l1616:
  1290                           
  1291                           ;main.c: 96:                _delay((unsigned long)((500)*(4000000/4000.0)));
  1292  0560  3003               	movlw	3
  1293  0561  1283               	bcf	3,5	;RP0=0, select bank0
  1294  0562  1303               	bcf	3,6	;RP1=0, select bank0
  1295  0563  00AF               	movwf	??_main+2
  1296  0564  308A               	movlw	138
  1297  0565  00AE               	movwf	??_main+1
  1298  0566  3055               	movlw	85
  1299  0567  00AD               	movwf	??_main
  1300  0568                     u1277:
  1301  0568  0BAD               	decfsz	??_main,f
  1302  0569  2D68               	goto	u1277
  1303  056A  0BAE               	decfsz	??_main+1,f
  1304  056B  2D68               	goto	u1277
  1305  056C  0BAF               	decfsz	??_main+2,f
  1306  056D  2D68               	goto	u1277
  1307  056E                     l1618:
  1308                           
  1309                           ;main.c: 98:                XC = Tecla * 100;
  1310  056E  1283               	bcf	3,5	;RP0=0, select bank0
  1311  056F  1303               	bcf	3,6	;RP1=0, select bank0
  1312  0570  084A               	movf	_Tecla+1,w
  1313  0571  00F1               	movwf	___wmul@multiplier+1
  1314  0572  0849               	movf	_Tecla,w
  1315  0573  00F0               	movwf	___wmul@multiplier
  1316  0574  3064               	movlw	100
  1317  0575  00F2               	movwf	___wmul@multiplicand
  1318  0576  3000               	movlw	0
  1319  0577  00F3               	movwf	___wmul@multiplicand+1
  1320  0578  120A  158A  27DB  120A  118A  	fcall	___wmul
  1321  057D  0871               	movf	?___wmul+1,w
  1322  057E  1283               	bcf	3,5	;RP0=0, select bank0
  1323  057F  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0580  00D0               	movwf	_XC+1
  1325  0581  0870               	movf	?___wmul,w
  1326  0582  00CF               	movwf	_XC
  1327                           
  1328                           ;main.c: 99:                Bandera ++;
  1329  0583  3001               	movlw	1
  1330  0584  07C7               	addwf	_Bandera,f
  1331  0585  1803               	skipnc
  1332  0586  0AC8               	incf	_Bandera+1,f
  1333  0587  3000               	movlw	0
  1334  0588  07C8               	addwf	_Bandera+1,f
  1335                           
  1336                           ;main.c: 100:         }
  1337  0589  2E33               	goto	l1654
  1338  058A                     l1620:
  1339  058A  3002               	movlw	2
  1340  058B  0647               	xorwf	_Bandera,w
  1341  058C  0448               	iorwf	_Bandera+1,w
  1342  058D  1D03               	btfss	3,2
  1343  058E  2D90               	goto	u1171
  1344  058F  2D91               	goto	u1170
  1345  0590                     u1171:
  1346  0590  2DE6               	goto	l1636
  1347  0591                     u1170:
  1348  0591                     l1622:
  1349                           
  1350                           ;main.c: 102:                pulsar_boton();
  1351  0591  120A  158A  27A0  120A  118A  	fcall	_pulsar_boton
  1352  0596                     l1624:
  1353                           
  1354                           ;main.c: 103:                sprintf (Cadena, "Tercer Digito %i", Tecla);
  1355  0596  302F               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1356  0597  1283               	bcf	3,5	;RP0=0, select bank0
  1357  0598  1303               	bcf	3,6	;RP1=0, select bank0
  1358  0599  00AD               	movwf	??_main
  1359  059A  082D               	movf	??_main,w
  1360  059B  00A0               	movwf	sprintf@f
  1361  059C  084A               	movf	_Tecla+1,w
  1362  059D  00A2               	movwf	?_sprintf+2
  1363  059E  0849               	movf	_Tecla,w
  1364  059F  00A1               	movwf	?_sprintf+1
  1365  05A0  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1366  05A1  120A  118A  2372  120A  118A  	fcall	_sprintf
  1367  05A6                     l1626:
  1368                           
  1369                           ;main.c: 104:                Lcd_Clear();
  1370  05A6  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1371  05AB                     l1628:
  1372                           
  1373                           ;main.c: 105:                Lcd_Set_Cursor(1,1);
  1374  05AB  01F4               	clrf	Lcd_Set_Cursor@b
  1375  05AC  0AF4               	incf	Lcd_Set_Cursor@b,f
  1376  05AD  3001               	movlw	1
  1377  05AE  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1378  05B3                     l1630:
  1379                           
  1380                           ;main.c: 106:                Lcd_Write_String(Cadena);
  1381  05B3  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1382  05B4  00F5               	movwf	Lcd_Write_String@a
  1383  05B5  3000               	movlw	0
  1384  05B6  00F6               	movwf	Lcd_Write_String@a+1
  1385  05B7  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1386  05BC                     l1632:
  1387                           
  1388                           ;main.c: 107:                _delay((unsigned long)((500)*(4000000/4000.0)));
  1389  05BC  3003               	movlw	3
  1390  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  1391  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  1392  05BF  00AF               	movwf	??_main+2
  1393  05C0  308A               	movlw	138
  1394  05C1  00AE               	movwf	??_main+1
  1395  05C2  3055               	movlw	85
  1396  05C3  00AD               	movwf	??_main
  1397  05C4                     u1287:
  1398  05C4  0BAD               	decfsz	??_main,f
  1399  05C5  2DC4               	goto	u1287
  1400  05C6  0BAE               	decfsz	??_main+1,f
  1401  05C7  2DC4               	goto	u1287
  1402  05C8  0BAF               	decfsz	??_main+2,f
  1403  05C9  2DC4               	goto	u1287
  1404  05CA                     l1634:
  1405                           
  1406                           ;main.c: 109:                XD = Tecla * 10;
  1407  05CA  1283               	bcf	3,5	;RP0=0, select bank0
  1408  05CB  1303               	bcf	3,6	;RP1=0, select bank0
  1409  05CC  084A               	movf	_Tecla+1,w
  1410  05CD  00F1               	movwf	___wmul@multiplier+1
  1411  05CE  0849               	movf	_Tecla,w
  1412  05CF  00F0               	movwf	___wmul@multiplier
  1413  05D0  300A               	movlw	10
  1414  05D1  00F2               	movwf	___wmul@multiplicand
  1415  05D2  3000               	movlw	0
  1416  05D3  00F3               	movwf	___wmul@multiplicand+1
  1417  05D4  120A  158A  27DB  120A  118A  	fcall	___wmul
  1418  05D9  0871               	movf	?___wmul+1,w
  1419  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  1420  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  1421  05DC  00D2               	movwf	_XD+1
  1422  05DD  0870               	movf	?___wmul,w
  1423  05DE  00D1               	movwf	_XD
  1424                           
  1425                           ;main.c: 110:                Bandera ++;
  1426  05DF  3001               	movlw	1
  1427  05E0  07C7               	addwf	_Bandera,f
  1428  05E1  1803               	skipnc
  1429  05E2  0AC8               	incf	_Bandera+1,f
  1430  05E3  3000               	movlw	0
  1431  05E4  07C8               	addwf	_Bandera+1,f
  1432                           
  1433                           ;main.c: 111:         }
  1434  05E5  2E33               	goto	l1654
  1435  05E6                     l1636:
  1436  05E6  3003               	movlw	3
  1437  05E7  0647               	xorwf	_Bandera,w
  1438  05E8  0448               	iorwf	_Bandera+1,w
  1439  05E9  1D03               	btfss	3,2
  1440  05EA  2DEC               	goto	u1181
  1441  05EB  2DED               	goto	u1180
  1442  05EC                     u1181:
  1443  05EC  2E33               	goto	l138
  1444  05ED                     u1180:
  1445  05ED                     l1638:
  1446                           
  1447                           ;main.c: 113:                pulsar_boton();
  1448  05ED  120A  158A  27A0  120A  118A  	fcall	_pulsar_boton
  1449  05F2                     l1640:
  1450                           
  1451                           ;main.c: 114:                sprintf (Cadena, "Cuarto digito %i", Tecla);
  1452  05F2  3040               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1453  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  1454  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  1455  05F5  00AD               	movwf	??_main
  1456  05F6  082D               	movf	??_main,w
  1457  05F7  00A0               	movwf	sprintf@f
  1458  05F8  084A               	movf	_Tecla+1,w
  1459  05F9  00A2               	movwf	?_sprintf+2
  1460  05FA  0849               	movf	_Tecla,w
  1461  05FB  00A1               	movwf	?_sprintf+1
  1462  05FC  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1463  05FD  120A  118A  2372  120A  118A  	fcall	_sprintf
  1464  0602                     l1642:
  1465                           
  1466                           ;main.c: 115:                Lcd_Clear();
  1467  0602  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1468  0607                     l1644:
  1469                           
  1470                           ;main.c: 116:                Lcd_Set_Cursor(1,1);
  1471  0607  01F4               	clrf	Lcd_Set_Cursor@b
  1472  0608  0AF4               	incf	Lcd_Set_Cursor@b,f
  1473  0609  3001               	movlw	1
  1474  060A  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1475  060F                     l1646:
  1476                           
  1477                           ;main.c: 117:                Lcd_Write_String(Cadena);
  1478  060F  3031               	movlw	(low (main@Cadena| 0))& (0+255)
  1479  0610  00F5               	movwf	Lcd_Write_String@a
  1480  0611  3000               	movlw	0
  1481  0612  00F6               	movwf	Lcd_Write_String@a+1
  1482  0613  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1483  0618                     l1648:
  1484                           
  1485                           ;main.c: 118:                _delay((unsigned long)((500)*(4000000/4000.0)));
  1486  0618  3003               	movlw	3
  1487  0619  1283               	bcf	3,5	;RP0=0, select bank0
  1488  061A  1303               	bcf	3,6	;RP1=0, select bank0
  1489  061B  00AF               	movwf	??_main+2
  1490  061C  308A               	movlw	138
  1491  061D  00AE               	movwf	??_main+1
  1492  061E  3055               	movlw	85
  1493  061F  00AD               	movwf	??_main
  1494  0620                     u1297:
  1495  0620  0BAD               	decfsz	??_main,f
  1496  0621  2E20               	goto	u1297
  1497  0622  0BAE               	decfsz	??_main+1,f
  1498  0623  2E20               	goto	u1297
  1499  0624  0BAF               	decfsz	??_main+2,f
  1500  0625  2E20               	goto	u1297
  1501  0626                     l1650:
  1502                           
  1503                           ;main.c: 120:                X = Tecla;
  1504  0626  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0627  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0628  084A               	movf	_Tecla+1,w
  1507  0629  00D4               	movwf	_X+1
  1508  062A  0849               	movf	_Tecla,w
  1509  062B  00D3               	movwf	_X
  1510  062C                     l1652:
  1511                           
  1512                           ;main.c: 121:                Bandera ++;
  1513  062C  3001               	movlw	1
  1514  062D  07C7               	addwf	_Bandera,f
  1515  062E  1803               	skipnc
  1516  062F  0AC8               	incf	_Bandera+1,f
  1517  0630  3000               	movlw	0
  1518  0631  07C8               	addwf	_Bandera+1,f
  1519  0632  2E33               	goto	l1654
  1520  0633                     l138:
  1521  0633                     l1654:
  1522                           
  1523                           ;main.c: 124:       Clave= X + XD + XC + XM;
  1524  0633  0851               	movf	_XD,w
  1525  0634  0753               	addwf	_X,w
  1526  0635  00AD               	movwf	??_main
  1527  0636  0852               	movf	_XD+1,w
  1528  0637  1803               	skipnc
  1529  0638  0A52               	incf	_XD+1,w
  1530  0639  0754               	addwf	_X+1,w
  1531  063A  00AE               	movwf	??_main+1
  1532  063B  084F               	movf	_XC,w
  1533  063C  072D               	addwf	??_main,w
  1534  063D  00AF               	movwf	??_main+2
  1535  063E  0850               	movf	_XC+1,w
  1536  063F  1803               	skipnc
  1537  0640  0A50               	incf	_XC+1,w
  1538  0641  072E               	addwf	??_main+1,w
  1539  0642  00B0               	movwf	??_main+3
  1540  0643  084D               	movf	_XM,w
  1541  0644  072F               	addwf	??_main+2,w
  1542  0645  00CB               	movwf	_Clave
  1543  0646  084E               	movf	_XM+1,w
  1544  0647  1803               	skipnc
  1545  0648  0A4E               	incf	_XM+1,w
  1546  0649  0730               	addwf	??_main+3,w
  1547  064A  00CC               	movwf	_Clave+1
  1548  064B                     l1656:
  1549                           
  1550                           ;main.c: 126:        if(Clave == Password){
  1551  064B  30B2               	movlw	178
  1552  064C  064B               	xorwf	_Clave,w
  1553  064D  3004               	movlw	4
  1554  064E  1903               	skipnz
  1555  064F  064C               	xorwf	_Clave+1,w
  1556  0650  1D03               	btfss	3,2
  1557  0651  2E53               	goto	u1191
  1558  0652  2E54               	goto	u1190
  1559  0653                     u1191:
  1560  0653  2EA1               	goto	l1676
  1561  0654                     u1190:
  1562  0654                     l1658:
  1563                           
  1564                           ;main.c: 128:        True = 1;
  1565  0654  3001               	movlw	1
  1566  0655  00D5               	movwf	_True
  1567  0656  3000               	movlw	0
  1568  0657  00D6               	movwf	_True+1
  1569  0658                     l1660:
  1570                           
  1571                           ;main.c: 129:        Apagar_Rojo();
  1572  0658  120A  158A  277F  120A  118A  	fcall	_Apagar_Rojo
  1573  065D                     l1662:
  1574                           
  1575                           ;main.c: 130:        Prender_Verde();
  1576  065D  120A  118A  20D6  120A  118A  	fcall	_Prender_Verde
  1577  0662                     l1664:
  1578                           
  1579                           ;main.c: 131:        Lcd_Clear();
  1580  0662  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1581  0667                     l1666:
  1582                           
  1583                           ;main.c: 132:        Lcd_Set_Cursor(1,4);
  1584  0667  3004               	movlw	4
  1585  0668  1283               	bcf	3,5	;RP0=0, select bank0
  1586  0669  1303               	bcf	3,6	;RP1=0, select bank0
  1587  066A  00AD               	movwf	??_main
  1588  066B  082D               	movf	??_main,w
  1589  066C  00F4               	movwf	Lcd_Set_Cursor@b
  1590  066D  3001               	movlw	1
  1591  066E  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1592  0673                     l1668:
  1593                           
  1594                           ;main.c: 133:        Lcd_Write_String("Cerradura");
  1595  0673  30A7               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1596  0674  00F5               	movwf	Lcd_Write_String@a
  1597  0675  3080               	movlw	128
  1598  0676  00F6               	movwf	Lcd_Write_String@a+1
  1599  0677  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1600  067C                     l1670:
  1601                           
  1602                           ;main.c: 134:        Lcd_Set_Cursor(2,5);
  1603  067C  3005               	movlw	5
  1604  067D  1283               	bcf	3,5	;RP0=0, select bank0
  1605  067E  1303               	bcf	3,6	;RP1=0, select bank0
  1606  067F  00AD               	movwf	??_main
  1607  0680  082D               	movf	??_main,w
  1608  0681  00F4               	movwf	Lcd_Set_Cursor@b
  1609  0682  3002               	movlw	2
  1610  0683  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1611  0688                     l1672:
  1612                           
  1613                           ;main.c: 135:        Lcd_Write_String("Abierta");
  1614  0688  30BA               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  1615  0689  00F5               	movwf	Lcd_Write_String@a
  1616  068A  3080               	movlw	128
  1617  068B  00F6               	movwf	Lcd_Write_String@a+1
  1618  068C  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1619  0691                     l1674:
  1620                           
  1621                           ;main.c: 136:        _delay((unsigned long)((5000)*(4000000/4000.0)));
  1622  0691  301A               	movlw	26
  1623  0692  1283               	bcf	3,5	;RP0=0, select bank0
  1624  0693  1303               	bcf	3,6	;RP1=0, select bank0
  1625  0694  00AF               	movwf	??_main+2
  1626  0695  305E               	movlw	94
  1627  0696  00AE               	movwf	??_main+1
  1628  0697  306D               	movlw	109
  1629  0698  00AD               	movwf	??_main
  1630  0699                     u1307:
  1631  0699  0BAD               	decfsz	??_main,f
  1632  069A  2E99               	goto	u1307
  1633  069B  0BAE               	decfsz	??_main+1,f
  1634  069C  2E99               	goto	u1307
  1635  069D  0BAF               	decfsz	??_main+2,f
  1636  069E  2E99               	goto	u1307
  1637  069F  2EA0               	nop2
  1638                           
  1639                           ;main.c: 137:        }
  1640  06A0  2FCD               	goto	l1732
  1641  06A1                     l1676:
  1642  06A1  3004               	movlw	4
  1643  06A2  0647               	xorwf	_Bandera,w
  1644  06A3  0448               	iorwf	_Bandera+1,w
  1645  06A4  1D03               	btfss	3,2
  1646  06A5  2EA7               	goto	u1201
  1647  06A6  2EA8               	goto	u1200
  1648  06A7                     u1201:
  1649  06A7  2FCD               	goto	l1732
  1650  06A8                     u1200:
  1651  06A8                     l1678:
  1652                           
  1653                           ;main.c: 140:            Lcd_Clear();
  1654  06A8  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1655                           
  1656                           ;main.c: 141:            Lcd_Set_Cursor(1,6);
  1657  06AD  3006               	movlw	6
  1658  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1659  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1660  06B0  00AD               	movwf	??_main
  1661  06B1  082D               	movf	??_main,w
  1662  06B2  00F4               	movwf	Lcd_Set_Cursor@b
  1663  06B3  3001               	movlw	1
  1664  06B4  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1665  06B9                     l1680:
  1666                           
  1667                           ;main.c: 142:            Lcd_Write_String("Contraseña");
  1668  06B9  3087               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  1669  06BA  00F5               	movwf	Lcd_Write_String@a
  1670  06BB  3080               	movlw	128
  1671  06BC  00F6               	movwf	Lcd_Write_String@a+1
  1672  06BD  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1673  06C2                     l1682:
  1674                           
  1675                           ;main.c: 143:            Lcd_Set_Cursor(2,5);
  1676  06C2  3005               	movlw	5
  1677  06C3  1283               	bcf	3,5	;RP0=0, select bank0
  1678  06C4  1303               	bcf	3,6	;RP1=0, select bank0
  1679  06C5  00AD               	movwf	??_main
  1680  06C6  082D               	movf	??_main,w
  1681  06C7  00F4               	movwf	Lcd_Set_Cursor@b
  1682  06C8  3002               	movlw	2
  1683  06C9  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1684                           
  1685                           ;main.c: 144:            Lcd_Write_String("Incorrecta");
  1686  06CE  3092               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  1687  06CF  00F5               	movwf	Lcd_Write_String@a
  1688  06D0  3080               	movlw	128
  1689  06D1  00F6               	movwf	Lcd_Write_String@a+1
  1690  06D2  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1691  06D7                     l1684:
  1692                           
  1693                           ;main.c: 145:            _delay((unsigned long)((2000)*(4000000/4000.0)));
  1694  06D7  300B               	movlw	11
  1695  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  1696  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  1697  06DA  00AF               	movwf	??_main+2
  1698  06DB  3026               	movlw	38
  1699  06DC  00AE               	movwf	??_main+1
  1700  06DD  305D               	movlw	93
  1701  06DE  00AD               	movwf	??_main
  1702  06DF                     u1317:
  1703  06DF  0BAD               	decfsz	??_main,f
  1704  06E0  2EDF               	goto	u1317
  1705  06E1  0BAE               	decfsz	??_main+1,f
  1706  06E2  2EDF               	goto	u1317
  1707  06E3  0BAF               	decfsz	??_main+2,f
  1708  06E4  2EDF               	goto	u1317
  1709  06E5                     l1686:
  1710                           
  1711                           ;main.c: 146:            Try ++;
  1712  06E5  3001               	movlw	1
  1713  06E6  1283               	bcf	3,5	;RP0=0, select bank0
  1714  06E7  1303               	bcf	3,6	;RP1=0, select bank0
  1715  06E8  07D7               	addwf	_Try,f
  1716  06E9  1803               	skipnc
  1717  06EA  0AD8               	incf	_Try+1,f
  1718  06EB  3000               	movlw	0
  1719  06EC  07D8               	addwf	_Try+1,f
  1720  06ED                     l1688:
  1721                           
  1722                           ;main.c: 147:            Bandera=0;
  1723  06ED  01C7               	clrf	_Bandera
  1724  06EE  01C8               	clrf	_Bandera+1
  1725  06EF                     l1690:
  1726                           
  1727                           ;main.c: 149:             if(Try==3){
  1728  06EF  3003               	movlw	3
  1729  06F0  0657               	xorwf	_Try,w
  1730  06F1  0458               	iorwf	_Try+1,w
  1731  06F2  1D03               	btfss	3,2
  1732  06F3  2EF5               	goto	u1211
  1733  06F4  2EF6               	goto	u1210
  1734  06F5                     u1211:
  1735  06F5  2F38               	goto	l1704
  1736  06F6                     u1210:
  1737  06F6                     l1692:
  1738                           
  1739                           ;main.c: 150:              Lcd_Clear();
  1740  06F6  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1741                           
  1742                           ;main.c: 151:              Lcd_Set_Cursor(1,4);
  1743  06FB  3004               	movlw	4
  1744  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  1745  06FD  1303               	bcf	3,6	;RP1=0, select bank0
  1746  06FE  00AD               	movwf	??_main
  1747  06FF  082D               	movf	??_main,w
  1748  0700  00F4               	movwf	Lcd_Set_Cursor@b
  1749  0701  3001               	movlw	1
  1750  0702  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1751  0707                     l1694:
  1752                           
  1753                           ;main.c: 152:              Lcd_Write_String("Bloqueada");
  1754  0707  309D               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  1755  0708  00F5               	movwf	Lcd_Write_String@a
  1756  0709  3080               	movlw	128
  1757  070A  00F6               	movwf	Lcd_Write_String@a+1
  1758  070B  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1759  0710                     l1696:
  1760                           
  1761                           ;main.c: 153:              _delay((unsigned long)((3000)*(4000000/4000.0)));
  1762  0710  3010               	movlw	16
  1763  0711  1283               	bcf	3,5	;RP0=0, select bank0
  1764  0712  1303               	bcf	3,6	;RP1=0, select bank0
  1765  0713  00AF               	movwf	??_main+2
  1766  0714  3039               	movlw	57
  1767  0715  00AE               	movwf	??_main+1
  1768  0716  300D               	movlw	13
  1769  0717  00AD               	movwf	??_main
  1770  0718                     u1327:
  1771  0718  0BAD               	decfsz	??_main,f
  1772  0719  2F18               	goto	u1327
  1773  071A  0BAE               	decfsz	??_main+1,f
  1774  071B  2F18               	goto	u1327
  1775  071C  0BAF               	decfsz	??_main+2,f
  1776  071D  2F18               	goto	u1327
  1777  071E                     l1698:
  1778                           
  1779                           ;main.c: 154:              True=3;
  1780  071E  3003               	movlw	3
  1781  071F  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0720  1303               	bcf	3,6	;RP1=0, select bank0
  1783  0721  00D5               	movwf	_True
  1784  0722  3000               	movlw	0
  1785  0723  00D6               	movwf	_True+1
  1786  0724                     l1700:
  1787                           
  1788                           ;main.c: 155:              _delay((unsigned long)((500)*(4000000/4000.0)));
  1789  0724  3003               	movlw	3
  1790  0725  1283               	bcf	3,5	;RP0=0, select bank0
  1791  0726  1303               	bcf	3,6	;RP1=0, select bank0
  1792  0727  00AF               	movwf	??_main+2
  1793  0728  308A               	movlw	138
  1794  0729  00AE               	movwf	??_main+1
  1795  072A  3055               	movlw	85
  1796  072B  00AD               	movwf	??_main
  1797  072C                     u1337:
  1798  072C  0BAD               	decfsz	??_main,f
  1799  072D  2F2C               	goto	u1337
  1800  072E  0BAE               	decfsz	??_main+1,f
  1801  072F  2F2C               	goto	u1337
  1802  0730  0BAF               	decfsz	??_main+2,f
  1803  0731  2F2C               	goto	u1337
  1804  0732                     l1702:
  1805                           
  1806                           ;main.c: 156:              alarma();
  1807  0732  120A  118A  20F4  120A  118A  	fcall	_alarma
  1808                           
  1809                           ;main.c: 158:             }
  1810  0737  2FCD               	goto	l1732
  1811  0738                     l1704:
  1812                           
  1813                           ;main.c: 160:              Lcd_Clear();
  1814  0738  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1815                           
  1816                           ;main.c: 161:              Lcd_Set_Cursor(1,4);
  1817  073D  3004               	movlw	4
  1818  073E  1283               	bcf	3,5	;RP0=0, select bank0
  1819  073F  1303               	bcf	3,6	;RP1=0, select bank0
  1820  0740  00AD               	movwf	??_main
  1821  0741  082D               	movf	??_main,w
  1822  0742  00F4               	movwf	Lcd_Set_Cursor@b
  1823  0743  3001               	movlw	1
  1824  0744  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1825  0749                     l1706:
  1826                           
  1827                           ;main.c: 162:              Lcd_Write_String("Intente de nuevo");
  1828  0749  3051               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  1829  074A  00F5               	movwf	Lcd_Write_String@a
  1830  074B  3080               	movlw	128
  1831  074C  00F6               	movwf	Lcd_Write_String@a+1
  1832  074D  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1833  0752                     l1708:
  1834                           
  1835                           ;main.c: 163:              _delay((unsigned long)((1500)*(4000000/4000.0)));
  1836  0752  3008               	movlw	8
  1837  0753  1283               	bcf	3,5	;RP0=0, select bank0
  1838  0754  1303               	bcf	3,6	;RP1=0, select bank0
  1839  0755  00AF               	movwf	??_main+2
  1840  0756  309D               	movlw	157
  1841  0757  00AE               	movwf	??_main+1
  1842  0758  3005               	movlw	5
  1843  0759  00AD               	movwf	??_main
  1844  075A                     u1347:
  1845  075A  0BAD               	decfsz	??_main,f
  1846  075B  2F5A               	goto	u1347
  1847  075C  0BAE               	decfsz	??_main+1,f
  1848  075D  2F5A               	goto	u1347
  1849  075E  0BAF               	decfsz	??_main+2,f
  1850  075F  2F5A               	goto	u1347
  1851  0760                     l1710:
  1852                           
  1853                           ;main.c: 164:              Lcd_Clear();
  1854  0760  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1855  0765                     l1712:
  1856                           
  1857                           ;main.c: 165:              Lcd_Set_Cursor(1,5);
  1858  0765  3005               	movlw	5
  1859  0766  1283               	bcf	3,5	;RP0=0, select bank0
  1860  0767  1303               	bcf	3,6	;RP1=0, select bank0
  1861  0768  00AD               	movwf	??_main
  1862  0769  082D               	movf	??_main,w
  1863  076A  00F4               	movwf	Lcd_Set_Cursor@b
  1864  076B  3001               	movlw	1
  1865  076C  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1866  0771                     l1714:
  1867                           
  1868                           ;main.c: 166:              Lcd_Write_String("Presione #");
  1869  0771  307C               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  1870  0772  00F5               	movwf	Lcd_Write_String@a
  1871  0773  3080               	movlw	128
  1872  0774  00F6               	movwf	Lcd_Write_String@a+1
  1873  0775  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1874  077A                     l1716:
  1875                           
  1876                           ;main.c: 167:              Tecla = Leer_tecla();
  1877  077A  120A  118A  22D0  120A  118A  	fcall	_Leer_tecla
  1878  077F  1283               	bcf	3,5	;RP0=0, select bank0
  1879  0780  1303               	bcf	3,6	;RP1=0, select bank0
  1880  0781  00AD               	movwf	??_main
  1881  0782  01AE               	clrf	??_main+1
  1882  0783  082D               	movf	??_main,w
  1883  0784  00C9               	movwf	_Tecla
  1884  0785  082E               	movf	??_main+1,w
  1885  0786  00CA               	movwf	_Tecla+1
  1886  0787                     l1718:
  1887                           
  1888                           ;main.c: 168:               _delay((unsigned long)((500)*(4000000/4000.0)));
  1889  0787  3003               	movlw	3
  1890  0788  1283               	bcf	3,5	;RP0=0, select bank0
  1891  0789  1303               	bcf	3,6	;RP1=0, select bank0
  1892  078A  00AF               	movwf	??_main+2
  1893  078B  308A               	movlw	138
  1894  078C  00AE               	movwf	??_main+1
  1895  078D  3055               	movlw	85
  1896  078E  00AD               	movwf	??_main
  1897  078F                     u1357:
  1898  078F  0BAD               	decfsz	??_main,f
  1899  0790  2F8F               	goto	u1357
  1900  0791  0BAE               	decfsz	??_main+1,f
  1901  0792  2F8F               	goto	u1357
  1902  0793  0BAF               	decfsz	??_main+2,f
  1903  0794  2F8F               	goto	u1357
  1904  0795                     l1724:	
  1905                           ;main.c: 170:               while(Tecla!=35){
  1906                           
  1907                           
  1908                           ;main.c: 170:               while(Tecla!=35){
  1909  0795  3023               	movlw	35
  1910  0796  1283               	bcf	3,5	;RP0=0, select bank0
  1911  0797  1303               	bcf	3,6	;RP1=0, select bank0
  1912  0798  0649               	xorwf	_Tecla,w
  1913  0799  044A               	iorwf	_Tecla+1,w
  1914  079A  1D03               	btfss	3,2
  1915  079B  2F9D               	goto	u1221
  1916  079C  2F9E               	goto	u1220
  1917  079D                     u1221:
  1918  079D  2F7A               	goto	l1716
  1919  079E                     u1220:
  1920  079E                     l1726:
  1921                           
  1922                           ;main.c: 174:              Lcd_Clear();
  1923  079E  120A  158A  2793  120A  118A  	fcall	_Lcd_Clear
  1924                           
  1925                           ;main.c: 175:              Lcd_Set_Cursor(1,3);
  1926  07A3  3003               	movlw	3
  1927  07A4  1283               	bcf	3,5	;RP0=0, select bank0
  1928  07A5  1303               	bcf	3,6	;RP1=0, select bank0
  1929  07A6  00AD               	movwf	??_main
  1930  07A7  082D               	movf	??_main,w
  1931  07A8  00F4               	movwf	Lcd_Set_Cursor@b
  1932  07A9  3001               	movlw	1
  1933  07AA  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1934  07AF                     l1728:
  1935                           
  1936                           ;main.c: 176:              Lcd_Write_String("Ingrese clave");
  1937  07AF  3062               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  1938  07B0  00F5               	movwf	Lcd_Write_String@a
  1939  07B1  3080               	movlw	128
  1940  07B2  00F6               	movwf	Lcd_Write_String@a+1
  1941  07B3  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1942  07B8                     l1730:
  1943                           
  1944                           ;main.c: 177:              Lcd_Set_Cursor(2,4);
  1945  07B8  3004               	movlw	4
  1946  07B9  1283               	bcf	3,5	;RP0=0, select bank0
  1947  07BA  1303               	bcf	3,6	;RP1=0, select bank0
  1948  07BB  00AD               	movwf	??_main
  1949  07BC  082D               	movf	??_main,w
  1950  07BD  00F4               	movwf	Lcd_Set_Cursor@b
  1951  07BE  3002               	movlw	2
  1952  07BF  120A  118A  2221  120A  118A  	fcall	_Lcd_Set_Cursor
  1953                           
  1954                           ;main.c: 178:              Lcd_Write_String("Otra vez");
  1955  07C4  30B1               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  1956  07C5  00F5               	movwf	Lcd_Write_String@a
  1957  07C6  3080               	movlw	128
  1958  07C7  00F6               	movwf	Lcd_Write_String@a+1
  1959  07C8  120A  118A  219B  120A  118A  	fcall	_Lcd_Write_String
  1960  07CD                     l1732:
  1961                           
  1962                           ;main.c: 69:   while((Try < 3) && (True == 0) ){
  1963  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  1964  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  1965  07CF  0858               	movf	_Try+1,w
  1966  07D0  3A80               	xorlw	128
  1967  07D1  00FF               	movwf	btemp+1
  1968  07D2  3080               	movlw	128
  1969  07D3  027F               	subwf	btemp+1,w
  1970  07D4  1D03               	skipz
  1971  07D5  2FD8               	goto	u1235
  1972  07D6  3003               	movlw	3
  1973  07D7  0257               	subwf	_Try,w
  1974  07D8                     u1235:
  1975  07D8  1803               	skipnc
  1976  07D9  2FDB               	goto	u1231
  1977  07DA  2FDC               	goto	u1230
  1978  07DB                     u1231:
  1979  07DB  2FE4               	goto	l153
  1980  07DC                     u1230:
  1981  07DC                     l1734:
  1982  07DC  1283               	bcf	3,5	;RP0=0, select bank0
  1983  07DD  1303               	bcf	3,6	;RP1=0, select bank0
  1984  07DE  0855               	movf	_True,w
  1985  07DF  0456               	iorwf	_True+1,w
  1986  07E0  1903               	btfsc	3,2
  1987  07E1  2FE3               	goto	u1241
  1988  07E2  2FE4               	goto	u1240
  1989  07E3                     u1241:
  1990  07E3  2CAD               	goto	l1578
  1991  07E4                     u1240:
  1992  07E4                     l153:
  1993  07E4  120A  118A  2800   	ljmp	start
  1994  07E7                     __end_of_main:
  1995                           
  1996                           	psect	text1
  1997  0372                     __ptext1:	
  1998 ;; *************** function _sprintf *****************
  1999 ;; Defined at:
  2000 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c"
  2001 ;; Parameters:    Size  Location     Type
  2002 ;;  sp              1    wreg     PTR unsigned char 
  2003 ;;		 -> main@Cadena(20), 
  2004 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  2005 ;;		 -> STR_6(17), STR_5(17), STR_4(18), STR_3(18), 
  2006 ;; Auto vars:     Size  Location     Type
  2007 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  2008 ;;		 -> main@Cadena(20), 
  2009 ;;  tmpval          4    0        struct .
  2010 ;;  val             2    9[BANK0 ] unsigned int 
  2011 ;;  cp              2    0        PTR const unsigned char 
  2012 ;;  len             2    0        unsigned int 
  2013 ;;  c               1   12[BANK0 ] unsigned char 
  2014 ;;  prec            1    8[BANK0 ] char 
  2015 ;;  flag            1    7[BANK0 ] unsigned char 
  2016 ;;  ap              1    6[BANK0 ] PTR void [1]
  2017 ;;		 -> ?_sprintf(2), 
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  2    0[BANK0 ] int 
  2020 ;; Registers used:
  2021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2027 ;;      Params:         0       3       0       0       0
  2028 ;;      Locals:         0       7       0       0       0
  2029 ;;      Temps:          0       3       0       0       0
  2030 ;;      Totals:         0      13       0       0       0
  2031 ;;Total ram usage:       13 bytes
  2032 ;; Hardware stack levels used: 1
  2033 ;; Hardware stack levels required when called: 1
  2034 ;; This function calls:
  2035 ;;		___lwdiv
  2036 ;;		___lwmod
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042  0372                     _sprintf:	
  2043                           ;psect for function _sprintf
  2044                           
  2045                           
  2046                           ;incstack = 0
  2047                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2048                           ;sprintf@sp stored from wreg
  2049  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2050  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2051  0374  00AB               	movwf	sprintf@sp
  2052  0375                     l1472:
  2053                           
  2054                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  2055  0375  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  2056  0376  00A3               	movwf	??_sprintf
  2057  0377  0823               	movf	??_sprintf,w
  2058  0378  00A6               	movwf	sprintf@ap
  2059                           
  2060                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2061  0379  2C43               	goto	l1524
  2062  037A                     l1474:
  2063                           
  2064                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  2065  037A  3025               	movlw	37
  2066  037B  062C               	xorwf	sprintf@c,w
  2067  037C  1903               	btfsc	3,2
  2068  037D  2B7F               	goto	u1011
  2069  037E  2B80               	goto	u1010
  2070  037F                     u1011:
  2071  037F  2B8C               	goto	l1480
  2072  0380                     u1010:
  2073  0380                     l1476:
  2074                           
  2075                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  2076  0380  082C               	movf	sprintf@c,w
  2077  0381  00A3               	movwf	??_sprintf
  2078  0382  082B               	movf	sprintf@sp,w
  2079  0383  0084               	movwf	4
  2080  0384  0823               	movf	??_sprintf,w
  2081  0385  1383               	bcf	3,7	;select IRP bank0
  2082  0386  0080               	movwf	0
  2083  0387                     l1478:
  2084  0387  3001               	movlw	1
  2085  0388  00A3               	movwf	??_sprintf
  2086  0389  0823               	movf	??_sprintf,w
  2087  038A  07AB               	addwf	sprintf@sp,f
  2088                           
  2089                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 559:    continue;
  2090  038B  2C43               	goto	l1524
  2091  038C                     l1480:
  2092                           
  2093                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  2094  038C  01A7               	clrf	sprintf@flag
  2095  038D                     l1484:	
  2096                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  2097                           
  2098  038D  3001               	movlw	1
  2099  038E  07A0               	addwf	sprintf@f,f
  2100  038F  30FF               	movlw	-1
  2101  0390  0720               	addwf	sprintf@f,w
  2102  0391  0084               	movwf	4
  2103  0392  120A  118A  200D  120A  118A  	fcall	stringdir
  2104  0397  00AC               	movwf	sprintf@c
  2105  0398  00A3               	movwf	??_sprintf
  2106  0399  01A4               	clrf	??_sprintf+1
  2107                           
  2108                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2109                           ; Switch size 1, requested type "simple"
  2110                           ; Number of cases is 1, Range of values is 0 to 0
  2111                           ; switch strategies available:
  2112                           ; Name         Instructions Cycles
  2113                           ; simple_byte            4     3 (average)
  2114                           ; direct_byte           11     8 (fixed)
  2115                           ; jumptable            260     6 (fixed)
  2116                           ;	Chosen strategy is simple_byte
  2117  039A  0824               	movf	??_sprintf+1,w
  2118  039B  3A00               	xorlw	0	; case 0
  2119  039C  1903               	skipnz
  2120  039D  2B9F               	goto	l1756
  2121  039E  2C43               	goto	l1524
  2122  039F                     l1756:
  2123                           
  2124                           ; Switch size 1, requested type "simple"
  2125                           ; Number of cases is 3, Range of values is 0 to 105
  2126                           ; switch strategies available:
  2127                           ; Name         Instructions Cycles
  2128                           ; simple_byte           10     6 (average)
  2129                           ; jumptable            260     6 (fixed)
  2130                           ;	Chosen strategy is simple_byte
  2131  039F  0823               	movf	??_sprintf,w
  2132  03A0  3A00               	xorlw	0	; case 0
  2133  03A1  1903               	skipnz
  2134  03A2  2C55               	goto	l1526
  2135  03A3  3A64               	xorlw	100	; case 100
  2136  03A4  1903               	skipnz
  2137  03A5  2BAA               	goto	l1486
  2138  03A6  3A0D               	xorlw	13	; case 105
  2139  03A7  1903               	skipnz
  2140  03A8  2BAA               	goto	l1486
  2141  03A9  2C43               	goto	l1524
  2142  03AA                     l1486:
  2143                           
  2144                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2145  03AA  0826               	movf	sprintf@ap,w
  2146  03AB  0084               	movwf	4
  2147  03AC  1383               	bcf	3,7	;select IRP bank0
  2148  03AD  0800               	movf	0,w
  2149  03AE  00A9               	movwf	sprintf@val
  2150  03AF  0A84               	incf	4,f
  2151  03B0  0800               	movf	0,w
  2152  03B1  00AA               	movwf	sprintf@val+1
  2153  03B2                     l1488:
  2154  03B2  3002               	movlw	2
  2155  03B3  00A3               	movwf	??_sprintf
  2156  03B4  0823               	movf	??_sprintf,w
  2157  03B5  07A6               	addwf	sprintf@ap,f
  2158  03B6                     l1490:
  2159                           
  2160                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  2161  03B6  1FAA               	btfss	sprintf@val+1,7
  2162  03B7  2BB9               	goto	u1021
  2163  03B8  2BBA               	goto	u1020
  2164  03B9                     u1021:
  2165  03B9  2BC3               	goto	l1496
  2166  03BA                     u1020:
  2167  03BA                     l1492:
  2168                           
  2169                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  2170  03BA  3003               	movlw	3
  2171  03BB  00A3               	movwf	??_sprintf
  2172  03BC  0823               	movf	??_sprintf,w
  2173  03BD  04A7               	iorwf	sprintf@flag,f
  2174  03BE                     l1494:
  2175                           
  2176                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  2177  03BE  09A9               	comf	sprintf@val,f
  2178  03BF  09AA               	comf	sprintf@val+1,f
  2179  03C0  0AA9               	incf	sprintf@val,f
  2180  03C1  1903               	skipnz
  2181  03C2  0AAA               	incf	sprintf@val+1,f
  2182  03C3                     l1496:
  2183                           
  2184                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  2185  03C3  01AC               	clrf	sprintf@c
  2186  03C4  0AAC               	incf	sprintf@c,f
  2187  03C5                     l1502:
  2188                           
  2189                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  2190  03C5  082C               	movf	sprintf@c,w
  2191  03C6  00A3               	movwf	??_sprintf
  2192  03C7  0723               	addwf	??_sprintf,w
  2193  03C8  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2194  03C9  0084               	movwf	4
  2195  03CA  120A  118A  200D  120A  118A  	fcall	stringdir
  2196  03CF  00A4               	movwf	??_sprintf+1
  2197  03D0  120A  118A  200D  120A  118A  	fcall	stringdir
  2198  03D5  00A5               	movwf	??_sprintf+2
  2199  03D6  0825               	movf	??_sprintf+2,w
  2200  03D7  022A               	subwf	sprintf@val+1,w
  2201  03D8  1D03               	skipz
  2202  03D9  2BDC               	goto	u1035
  2203  03DA  0824               	movf	??_sprintf+1,w
  2204  03DB  0229               	subwf	sprintf@val,w
  2205  03DC                     u1035:
  2206  03DC  1803               	skipnc
  2207  03DD  2BDF               	goto	u1031
  2208  03DE  2BE0               	goto	u1030
  2209  03DF                     u1031:
  2210  03DF  2BE1               	goto	l1506
  2211  03E0                     u1030:
  2212  03E0  2BEB               	goto	l1508
  2213  03E1                     l1506:
  2214  03E1  3001               	movlw	1
  2215  03E2  00A3               	movwf	??_sprintf
  2216  03E3  0823               	movf	??_sprintf,w
  2217  03E4  07AC               	addwf	sprintf@c,f
  2218  03E5  3005               	movlw	5
  2219  03E6  062C               	xorwf	sprintf@c,w
  2220  03E7  1D03               	btfss	3,2
  2221  03E8  2BEA               	goto	u1041
  2222  03E9  2BEB               	goto	u1040
  2223  03EA                     u1041:
  2224  03EA  2BC5               	goto	l1502
  2225  03EB                     u1040:
  2226  03EB                     l1508:
  2227                           
  2228                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  2229  03EB  0827               	movf	sprintf@flag,w
  2230  03EC  3903               	andlw	3
  2231  03ED  1903               	btfsc	3,2
  2232  03EE  2BF0               	goto	u1051
  2233  03EF  2BF1               	goto	u1050
  2234  03F0                     u1051:
  2235  03F0  2BFC               	goto	l1514
  2236  03F1                     u1050:
  2237  03F1                     l1510:
  2238                           
  2239                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  2240  03F1  302D               	movlw	45
  2241  03F2  00A3               	movwf	??_sprintf
  2242  03F3  082B               	movf	sprintf@sp,w
  2243  03F4  0084               	movwf	4
  2244  03F5  0823               	movf	??_sprintf,w
  2245  03F6  1383               	bcf	3,7	;select IRP bank0
  2246  03F7  0080               	movwf	0
  2247  03F8                     l1512:
  2248  03F8  3001               	movlw	1
  2249  03F9  00A3               	movwf	??_sprintf
  2250  03FA  0823               	movf	??_sprintf,w
  2251  03FB  07AB               	addwf	sprintf@sp,f
  2252  03FC                     l1514:
  2253                           
  2254                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  2255  03FC  082C               	movf	sprintf@c,w
  2256  03FD  00A3               	movwf	??_sprintf
  2257  03FE  0823               	movf	??_sprintf,w
  2258  03FF  00A8               	movwf	sprintf@prec
  2259                           
  2260                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2261  0400  2C3A               	goto	l1522
  2262  0401                     l1516:
  2263                           
  2264                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  2265  0401  300A               	movlw	10
  2266  0402  00F8               	movwf	___lwmod@divisor
  2267  0403  3000               	movlw	0
  2268  0404  00F9               	movwf	___lwmod@divisor+1
  2269  0405  0828               	movf	sprintf@prec,w
  2270  0406  00A3               	movwf	??_sprintf
  2271  0407  0723               	addwf	??_sprintf,w
  2272  0408  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  2273  0409  0084               	movwf	4
  2274  040A  120A  118A  200D  120A  118A  	fcall	stringdir
  2275  040F  00F0               	movwf	___lwdiv@divisor
  2276  0410  120A  118A  200D  120A  118A  	fcall	stringdir
  2277  0415  00F1               	movwf	___lwdiv@divisor+1
  2278  0416  082A               	movf	sprintf@val+1,w
  2279  0417  00F3               	movwf	___lwdiv@dividend+1
  2280  0418  0829               	movf	sprintf@val,w
  2281  0419  00F2               	movwf	___lwdiv@dividend
  2282  041A  120A  118A  21DD  120A  118A  	fcall	___lwdiv
  2283  041F  0871               	movf	?___lwdiv+1,w
  2284  0420  00FB               	movwf	___lwmod@dividend+1
  2285  0421  0870               	movf	?___lwdiv,w
  2286  0422  00FA               	movwf	___lwmod@dividend
  2287  0423  120A  118A  2161  120A  118A  	fcall	___lwmod
  2288  0428  0878               	movf	?___lwmod,w
  2289  0429  3E30               	addlw	48
  2290  042A  1283               	bcf	3,5	;RP0=0, select bank0
  2291  042B  1303               	bcf	3,6	;RP1=0, select bank0
  2292  042C  00A4               	movwf	??_sprintf+1
  2293  042D  0824               	movf	??_sprintf+1,w
  2294  042E  00AC               	movwf	sprintf@c
  2295  042F                     l1518:
  2296                           
  2297                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  2298  042F  082C               	movf	sprintf@c,w
  2299  0430  00A3               	movwf	??_sprintf
  2300  0431  082B               	movf	sprintf@sp,w
  2301  0432  0084               	movwf	4
  2302  0433  0823               	movf	??_sprintf,w
  2303  0434  1383               	bcf	3,7	;select IRP bank0
  2304  0435  0080               	movwf	0
  2305  0436                     l1520:
  2306  0436  3001               	movlw	1
  2307  0437  00A3               	movwf	??_sprintf
  2308  0438  0823               	movf	??_sprintf,w
  2309  0439  07AB               	addwf	sprintf@sp,f
  2310  043A                     l1522:
  2311                           
  2312                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  2313  043A  30FF               	movlw	255
  2314  043B  00A3               	movwf	??_sprintf
  2315  043C  0823               	movf	??_sprintf,w
  2316  043D  07A8               	addwf	sprintf@prec,f
  2317  043E  0A28               	incf	sprintf@prec,w
  2318  043F  1D03               	btfss	3,2
  2319  0440  2C42               	goto	u1061
  2320  0441  2C43               	goto	u1060
  2321  0442                     u1061:
  2322  0442  2C01               	goto	l1516
  2323  0443                     u1060:
  2324  0443                     l1524:
  2325                           
  2326                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  2327  0443  3001               	movlw	1
  2328  0444  07A0               	addwf	sprintf@f,f
  2329  0445  30FF               	movlw	-1
  2330  0446  0720               	addwf	sprintf@f,w
  2331  0447  0084               	movwf	4
  2332  0448  120A  118A  200D  120A  118A  	fcall	stringdir
  2333  044D  00A3               	movwf	??_sprintf
  2334  044E  0823               	movf	??_sprintf,w
  2335  044F  00AC               	movwf	sprintf@c
  2336  0450  082C               	movf	sprintf@c,w
  2337  0451  1D03               	btfss	3,2
  2338  0452  2C54               	goto	u1071
  2339  0453  2C55               	goto	u1070
  2340  0454                     u1071:
  2341  0454  2B7A               	goto	l1474
  2342  0455                     u1070:
  2343  0455                     l1526:
  2344                           
  2345                           ;C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  2346  0455  082B               	movf	sprintf@sp,w
  2347  0456  0084               	movwf	4
  2348  0457  1383               	bcf	3,7	;select IRP bank0
  2349  0458  0180               	clrf	0
  2350  0459                     l298:
  2351  0459  0008               	return
  2352  045A                     __end_of_sprintf:
  2353                           
  2354                           	psect	text2
  2355  0161                     __ptext2:	
  2356 ;; *************** function ___lwmod *****************
  2357 ;; Defined at:
  2358 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
  2359 ;; Parameters:    Size  Location     Type
  2360 ;;  divisor         2    8[COMMON] unsigned int 
  2361 ;;  dividend        2   10[COMMON] unsigned int 
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;  counter         1   13[COMMON] unsigned char 
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  2    8[COMMON] unsigned int 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2373 ;;      Params:         4       0       0       0       0
  2374 ;;      Locals:         1       0       0       0       0
  2375 ;;      Temps:          1       0       0       0       0
  2376 ;;      Totals:         6       0       0       0       0
  2377 ;;Total ram usage:        6 bytes
  2378 ;; Hardware stack levels used: 1
  2379 ;; This function calls:
  2380 ;;		Nothing
  2381 ;; This function is called by:
  2382 ;;		_sprintf
  2383 ;; This function uses a non-reentrant model
  2384 ;;
  2385                           
  2386  0161                     ___lwmod:	
  2387                           ;psect for function ___lwmod
  2388                           
  2389  0161                     l1348:	
  2390                           ;incstack = 0
  2391                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2392                           
  2393  0161  0878               	movf	___lwmod@divisor,w
  2394  0162  0479               	iorwf	___lwmod@divisor+1,w
  2395  0163  1903               	btfsc	3,2
  2396  0164  2966               	goto	u751
  2397  0165  2967               	goto	u750
  2398  0166                     u751:
  2399  0166  2996               	goto	l1366
  2400  0167                     u750:
  2401  0167                     l1350:
  2402  0167  01FD               	clrf	___lwmod@counter
  2403  0168  0AFD               	incf	___lwmod@counter,f
  2404  0169  2975               	goto	l1356
  2405  016A                     l1352:
  2406  016A  3001               	movlw	1
  2407  016B                     u765:
  2408  016B  1003               	clrc
  2409  016C  0DF8               	rlf	___lwmod@divisor,f
  2410  016D  0DF9               	rlf	___lwmod@divisor+1,f
  2411  016E  3EFF               	addlw	-1
  2412  016F  1D03               	skipz
  2413  0170  296B               	goto	u765
  2414  0171                     l1354:
  2415  0171  3001               	movlw	1
  2416  0172  00FC               	movwf	??___lwmod
  2417  0173  087C               	movf	??___lwmod,w
  2418  0174  07FD               	addwf	___lwmod@counter,f
  2419  0175                     l1356:
  2420  0175  1FF9               	btfss	___lwmod@divisor+1,7
  2421  0176  2978               	goto	u771
  2422  0177  2979               	goto	u770
  2423  0178                     u771:
  2424  0178  296A               	goto	l1352
  2425  0179                     u770:
  2426  0179                     l1358:
  2427  0179  0879               	movf	___lwmod@divisor+1,w
  2428  017A  027B               	subwf	___lwmod@dividend+1,w
  2429  017B  1D03               	skipz
  2430  017C  297F               	goto	u785
  2431  017D  0878               	movf	___lwmod@divisor,w
  2432  017E  027A               	subwf	___lwmod@dividend,w
  2433  017F                     u785:
  2434  017F  1C03               	skipc
  2435  0180  2982               	goto	u781
  2436  0181  2983               	goto	u780
  2437  0182                     u781:
  2438  0182  2989               	goto	l1362
  2439  0183                     u780:
  2440  0183                     l1360:
  2441  0183  0878               	movf	___lwmod@divisor,w
  2442  0184  02FA               	subwf	___lwmod@dividend,f
  2443  0185  0879               	movf	___lwmod@divisor+1,w
  2444  0186  1C03               	skipc
  2445  0187  03FB               	decf	___lwmod@dividend+1,f
  2446  0188  02FB               	subwf	___lwmod@dividend+1,f
  2447  0189                     l1362:
  2448  0189  3001               	movlw	1
  2449  018A                     u795:
  2450  018A  1003               	clrc
  2451  018B  0CF9               	rrf	___lwmod@divisor+1,f
  2452  018C  0CF8               	rrf	___lwmod@divisor,f
  2453  018D  3EFF               	addlw	-1
  2454  018E  1D03               	skipz
  2455  018F  298A               	goto	u795
  2456  0190                     l1364:
  2457  0190  3001               	movlw	1
  2458  0191  02FD               	subwf	___lwmod@counter,f
  2459  0192  1D03               	btfss	3,2
  2460  0193  2995               	goto	u801
  2461  0194  2996               	goto	u800
  2462  0195                     u801:
  2463  0195  2979               	goto	l1358
  2464  0196                     u800:
  2465  0196                     l1366:
  2466  0196  087B               	movf	___lwmod@dividend+1,w
  2467  0197  00F9               	movwf	?___lwmod+1
  2468  0198  087A               	movf	___lwmod@dividend,w
  2469  0199  00F8               	movwf	?___lwmod
  2470  019A                     l584:
  2471  019A  0008               	return
  2472  019B                     __end_of___lwmod:
  2473                           
  2474                           	psect	text3
  2475  01DD                     __ptext3:	
  2476 ;; *************** function ___lwdiv *****************
  2477 ;; Defined at:
  2478 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
  2479 ;; Parameters:    Size  Location     Type
  2480 ;;  divisor         2    0[COMMON] unsigned int 
  2481 ;;  dividend        2    2[COMMON] unsigned int 
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;  quotient        2    5[COMMON] unsigned int 
  2484 ;;  counter         1    7[COMMON] unsigned char 
  2485 ;; Return value:  Size  Location     Type
  2486 ;;                  2    0[COMMON] unsigned int 
  2487 ;; Registers used:
  2488 ;;		wreg, status,2, status,0
  2489 ;; Tracked objects:
  2490 ;;		On entry : 0/0
  2491 ;;		On exit  : 0/0
  2492 ;;		Unchanged: 0/0
  2493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2494 ;;      Params:         4       0       0       0       0
  2495 ;;      Locals:         3       0       0       0       0
  2496 ;;      Temps:          1       0       0       0       0
  2497 ;;      Totals:         8       0       0       0       0
  2498 ;;Total ram usage:        8 bytes
  2499 ;; Hardware stack levels used: 1
  2500 ;; This function calls:
  2501 ;;		Nothing
  2502 ;; This function is called by:
  2503 ;;		_sprintf
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507  01DD                     ___lwdiv:	
  2508                           ;psect for function ___lwdiv
  2509                           
  2510  01DD                     l1322:	
  2511                           ;incstack = 0
  2512                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2513                           
  2514  01DD  01F5               	clrf	___lwdiv@quotient
  2515  01DE  01F6               	clrf	___lwdiv@quotient+1
  2516  01DF                     l1324:
  2517  01DF  0870               	movf	___lwdiv@divisor,w
  2518  01E0  0471               	iorwf	___lwdiv@divisor+1,w
  2519  01E1  1903               	btfsc	3,2
  2520  01E2  29E4               	goto	u681
  2521  01E3  29E5               	goto	u680
  2522  01E4                     u681:
  2523  01E4  2A1C               	goto	l1344
  2524  01E5                     u680:
  2525  01E5                     l1326:
  2526  01E5  01F7               	clrf	___lwdiv@counter
  2527  01E6  0AF7               	incf	___lwdiv@counter,f
  2528  01E7  29F3               	goto	l1332
  2529  01E8                     l1328:
  2530  01E8  3001               	movlw	1
  2531  01E9                     u695:
  2532  01E9  1003               	clrc
  2533  01EA  0DF0               	rlf	___lwdiv@divisor,f
  2534  01EB  0DF1               	rlf	___lwdiv@divisor+1,f
  2535  01EC  3EFF               	addlw	-1
  2536  01ED  1D03               	skipz
  2537  01EE  29E9               	goto	u695
  2538  01EF                     l1330:
  2539  01EF  3001               	movlw	1
  2540  01F0  00F4               	movwf	??___lwdiv
  2541  01F1  0874               	movf	??___lwdiv,w
  2542  01F2  07F7               	addwf	___lwdiv@counter,f
  2543  01F3                     l1332:
  2544  01F3  1FF1               	btfss	___lwdiv@divisor+1,7
  2545  01F4  29F6               	goto	u701
  2546  01F5  29F7               	goto	u700
  2547  01F6                     u701:
  2548  01F6  29E8               	goto	l1328
  2549  01F7                     u700:
  2550  01F7                     l1334:
  2551  01F7  3001               	movlw	1
  2552  01F8                     u715:
  2553  01F8  1003               	clrc
  2554  01F9  0DF5               	rlf	___lwdiv@quotient,f
  2555  01FA  0DF6               	rlf	___lwdiv@quotient+1,f
  2556  01FB  3EFF               	addlw	-1
  2557  01FC  1D03               	skipz
  2558  01FD  29F8               	goto	u715
  2559  01FE  0871               	movf	___lwdiv@divisor+1,w
  2560  01FF  0273               	subwf	___lwdiv@dividend+1,w
  2561  0200  1D03               	skipz
  2562  0201  2A04               	goto	u725
  2563  0202  0870               	movf	___lwdiv@divisor,w
  2564  0203  0272               	subwf	___lwdiv@dividend,w
  2565  0204                     u725:
  2566  0204  1C03               	skipc
  2567  0205  2A07               	goto	u721
  2568  0206  2A08               	goto	u720
  2569  0207                     u721:
  2570  0207  2A0F               	goto	l1340
  2571  0208                     u720:
  2572  0208                     l1336:
  2573  0208  0870               	movf	___lwdiv@divisor,w
  2574  0209  02F2               	subwf	___lwdiv@dividend,f
  2575  020A  0871               	movf	___lwdiv@divisor+1,w
  2576  020B  1C03               	skipc
  2577  020C  03F3               	decf	___lwdiv@dividend+1,f
  2578  020D  02F3               	subwf	___lwdiv@dividend+1,f
  2579  020E                     l1338:
  2580  020E  1475               	bsf	___lwdiv@quotient,0
  2581  020F                     l1340:
  2582  020F  3001               	movlw	1
  2583  0210                     u735:
  2584  0210  1003               	clrc
  2585  0211  0CF1               	rrf	___lwdiv@divisor+1,f
  2586  0212  0CF0               	rrf	___lwdiv@divisor,f
  2587  0213  3EFF               	addlw	-1
  2588  0214  1D03               	skipz
  2589  0215  2A10               	goto	u735
  2590  0216                     l1342:
  2591  0216  3001               	movlw	1
  2592  0217  02F7               	subwf	___lwdiv@counter,f
  2593  0218  1D03               	btfss	3,2
  2594  0219  2A1B               	goto	u741
  2595  021A  2A1C               	goto	u740
  2596  021B                     u741:
  2597  021B  29F7               	goto	l1334
  2598  021C                     u740:
  2599  021C                     l1344:
  2600  021C  0876               	movf	___lwdiv@quotient+1,w
  2601  021D  00F1               	movwf	?___lwdiv+1
  2602  021E  0875               	movf	___lwdiv@quotient,w
  2603  021F  00F0               	movwf	?___lwdiv
  2604  0220                     l574:
  2605  0220  0008               	return
  2606  0221                     __end_of___lwdiv:
  2607                           
  2608                           	psect	text4
  2609  0FA0                     __ptext4:	
  2610 ;; *************** function _pulsar_boton *****************
  2611 ;; Defined at:
  2612 ;;		line 26 in file "main.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;		None
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;		None
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2626 ;;      Params:         0       0       0       0       0
  2627 ;;      Locals:         0       0       0       0       0
  2628 ;;      Temps:          2       0       0       0       0
  2629 ;;      Totals:         2       0       0       0       0
  2630 ;;Total ram usage:        2 bytes
  2631 ;; Hardware stack levels used: 1
  2632 ;; This function calls:
  2633 ;;		Nothing
  2634 ;; This function is called by:
  2635 ;;		_main
  2636 ;; This function uses a non-reentrant model
  2637 ;;
  2638                           
  2639  0FA0                     _pulsar_boton:	
  2640                           ;psect for function _pulsar_boton
  2641                           
  2642  0FA0                     l1418:	
  2643                           ;incstack = 0
  2644                           ; Regs used in _pulsar_boton: [wreg]
  2645                           
  2646                           
  2647                           ;main.c: 27:     RC2=1;
  2648  0FA0  1283               	bcf	3,5	;RP0=0, select bank0
  2649  0FA1  1303               	bcf	3,6	;RP1=0, select bank0
  2650  0FA2  1507               	bsf	7,2	;volatile
  2651  0FA3                     l1420:
  2652                           
  2653                           ;main.c: 28:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2654  0FA3  3082               	movlw	130
  2655  0FA4  00F1               	movwf	??_pulsar_boton+1
  2656  0FA5  30DD               	movlw	221
  2657  0FA6  00F0               	movwf	??_pulsar_boton
  2658  0FA7                     u1367:
  2659  0FA7  0BF0               	decfsz	??_pulsar_boton,f
  2660  0FA8  2FA7               	goto	u1367
  2661  0FA9  0BF1               	decfsz	??_pulsar_boton+1,f
  2662  0FAA  2FA7               	goto	u1367
  2663  0FAB  2FAC               	nop2
  2664  0FAC                     l1422:
  2665                           
  2666                           ;main.c: 29:     RC2=1;
  2667  0FAC  1283               	bcf	3,5	;RP0=0, select bank0
  2668  0FAD  1303               	bcf	3,6	;RP1=0, select bank0
  2669  0FAE  1507               	bsf	7,2	;volatile
  2670                           
  2671                           ;main.c: 30:     _delay((unsigned long)((100)*(4000000/4000.0)));
  2672  0FAF  3082               	movlw	130
  2673  0FB0  00F1               	movwf	??_pulsar_boton+1
  2674  0FB1  30DD               	movlw	221
  2675  0FB2  00F0               	movwf	??_pulsar_boton
  2676  0FB3                     u1377:
  2677  0FB3  0BF0               	decfsz	??_pulsar_boton,f
  2678  0FB4  2FB3               	goto	u1377
  2679  0FB5  0BF1               	decfsz	??_pulsar_boton+1,f
  2680  0FB6  2FB3               	goto	u1377
  2681  0FB7  2FB8               	nop2
  2682  0FB8                     l102:
  2683  0FB8  0008               	return
  2684  0FB9                     __end_of_pulsar_boton:
  2685                           
  2686                           	psect	text5
  2687  00F4                     __ptext5:	
  2688 ;; *************** function _alarma *****************
  2689 ;; Defined at:
  2690 ;;		line 32 in file "main.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  a               2    3[COMMON] int 
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		wreg, status,2, btemp+1
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2704 ;;      Params:         0       0       0       0       0
  2705 ;;      Locals:         2       0       0       0       0
  2706 ;;      Temps:          3       0       0       0       0
  2707 ;;      Totals:         5       0       0       0       0
  2708 ;;Total ram usage:        5 bytes
  2709 ;; Hardware stack levels used: 1
  2710 ;; This function calls:
  2711 ;;		Nothing
  2712 ;; This function is called by:
  2713 ;;		_main
  2714 ;; This function uses a non-reentrant model
  2715 ;;
  2716                           
  2717  00F4                     _alarma:	
  2718                           ;psect for function _alarma
  2719                           
  2720  00F4                     l1424:	
  2721                           ;incstack = 0
  2722                           ; Regs used in _alarma: [wreg+status,2+btemp+1]
  2723                           
  2724                           
  2725                           ;main.c: 33:     for(int a=0; a<=4; a++){
  2726  00F4  01F3               	clrf	alarma@a
  2727  00F5  01F4               	clrf	alarma@a+1
  2728  00F6                     l105:
  2729                           
  2730                           ;main.c: 34:         RC2=1;
  2731  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  2732  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  2733  00F8  1507               	bsf	7,2	;volatile
  2734  00F9                     l1430:
  2735                           
  2736                           ;main.c: 35:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  2737  00F9  3006               	movlw	6
  2738  00FA  00F2               	movwf	??_alarma+2
  2739  00FB  3013               	movlw	19
  2740  00FC  00F1               	movwf	??_alarma+1
  2741  00FD  30AD               	movlw	173
  2742  00FE  00F0               	movwf	??_alarma
  2743  00FF                     u1387:
  2744  00FF  0BF0               	decfsz	??_alarma,f
  2745  0100  28FF               	goto	u1387
  2746  0101  0BF1               	decfsz	??_alarma+1,f
  2747  0102  28FF               	goto	u1387
  2748  0103  0BF2               	decfsz	??_alarma+2,f
  2749  0104  28FF               	goto	u1387
  2750  0105  2906               	nop2
  2751  0106                     l1432:
  2752                           
  2753                           ;main.c: 36:          RC2=0;
  2754  0106  1283               	bcf	3,5	;RP0=0, select bank0
  2755  0107  1303               	bcf	3,6	;RP1=0, select bank0
  2756  0108  1107               	bcf	7,2	;volatile
  2757                           
  2758                           ;main.c: 37:         _delay((unsigned long)((1000)*(4000000/4000.0)));
  2759  0109  3006               	movlw	6
  2760  010A  00F2               	movwf	??_alarma+2
  2761  010B  3013               	movlw	19
  2762  010C  00F1               	movwf	??_alarma+1
  2763  010D  30AD               	movlw	173
  2764  010E  00F0               	movwf	??_alarma
  2765  010F                     u1397:
  2766  010F  0BF0               	decfsz	??_alarma,f
  2767  0110  290F               	goto	u1397
  2768  0111  0BF1               	decfsz	??_alarma+1,f
  2769  0112  290F               	goto	u1397
  2770  0113  0BF2               	decfsz	??_alarma+2,f
  2771  0114  290F               	goto	u1397
  2772  0115  2916               	nop2
  2773                           
  2774                           ;main.c: 39:     }
  2775  0116  3001               	movlw	1
  2776  0117  07F3               	addwf	alarma@a,f
  2777  0118  1803               	skipnc
  2778  0119  0AF4               	incf	alarma@a+1,f
  2779  011A  3000               	movlw	0
  2780  011B  07F4               	addwf	alarma@a+1,f
  2781  011C                     l1434:
  2782  011C  0874               	movf	alarma@a+1,w
  2783  011D  3A80               	xorlw	128
  2784  011E  00FF               	movwf	btemp+1
  2785  011F  3080               	movlw	128
  2786  0120  027F               	subwf	btemp+1,w
  2787  0121  1D03               	skipz
  2788  0122  2925               	goto	u885
  2789  0123  3005               	movlw	5
  2790  0124  0273               	subwf	alarma@a,w
  2791  0125                     u885:
  2792  0125  1C03               	skipc
  2793  0126  2928               	goto	u881
  2794  0127  2929               	goto	u880
  2795  0128                     u881:
  2796  0128  28F6               	goto	l105
  2797  0129                     u880:
  2798  0129                     l107:
  2799  0129  0008               	return
  2800  012A                     __end_of_alarma:
  2801                           
  2802                           	psect	text6
  2803  0FDB                     __ptext6:	
  2804 ;; *************** function ___wmul *****************
  2805 ;; Defined at:
  2806 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  multiplier      2    0[COMMON] unsigned int 
  2809 ;;  multiplicand    2    2[COMMON] unsigned int 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  product         2    4[COMMON] unsigned int 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  2    0[COMMON] unsigned int 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2821 ;;      Params:         4       0       0       0       0
  2822 ;;      Locals:         2       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0
  2824 ;;      Totals:         6       0       0       0       0
  2825 ;;Total ram usage:        6 bytes
  2826 ;; Hardware stack levels used: 1
  2827 ;; This function calls:
  2828 ;;		Nothing
  2829 ;; This function is called by:
  2830 ;;		_main
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834  0FDB                     ___wmul:	
  2835                           ;psect for function ___wmul
  2836                           
  2837  0FDB                     l1534:	
  2838                           ;incstack = 0
  2839                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2840                           
  2841  0FDB  01F4               	clrf	___wmul@product
  2842  0FDC  01F5               	clrf	___wmul@product+1
  2843  0FDD                     l1536:
  2844  0FDD  1C70               	btfss	___wmul@multiplier,0
  2845  0FDE  2FE0               	goto	u1081
  2846  0FDF  2FE1               	goto	u1080
  2847  0FE0                     u1081:
  2848  0FE0  2FE7               	goto	l302
  2849  0FE1                     u1080:
  2850  0FE1                     l1538:
  2851  0FE1  0872               	movf	___wmul@multiplicand,w
  2852  0FE2  07F4               	addwf	___wmul@product,f
  2853  0FE3  1803               	skipnc
  2854  0FE4  0AF5               	incf	___wmul@product+1,f
  2855  0FE5  0873               	movf	___wmul@multiplicand+1,w
  2856  0FE6  07F5               	addwf	___wmul@product+1,f
  2857  0FE7                     l302:
  2858  0FE7  3001               	movlw	1
  2859  0FE8                     u1095:
  2860  0FE8  1003               	clrc
  2861  0FE9  0DF2               	rlf	___wmul@multiplicand,f
  2862  0FEA  0DF3               	rlf	___wmul@multiplicand+1,f
  2863  0FEB  3EFF               	addlw	-1
  2864  0FEC  1D03               	skipz
  2865  0FED  2FE8               	goto	u1095
  2866  0FEE                     l1540:
  2867  0FEE  3001               	movlw	1
  2868  0FEF                     u1105:
  2869  0FEF  1003               	clrc
  2870  0FF0  0CF1               	rrf	___wmul@multiplier+1,f
  2871  0FF1  0CF0               	rrf	___wmul@multiplier,f
  2872  0FF2  3EFF               	addlw	-1
  2873  0FF3  1D03               	skipz
  2874  0FF4  2FEF               	goto	u1105
  2875  0FF5                     l1542:
  2876  0FF5  0870               	movf	___wmul@multiplier,w
  2877  0FF6  0471               	iorwf	___wmul@multiplier+1,w
  2878  0FF7  1D03               	btfss	3,2
  2879  0FF8  2FFA               	goto	u1111
  2880  0FF9  2FFB               	goto	u1110
  2881  0FFA                     u1111:
  2882  0FFA  2FDD               	goto	l1536
  2883  0FFB                     u1110:
  2884  0FFB                     l1544:
  2885  0FFB  0875               	movf	___wmul@product+1,w
  2886  0FFC  00F1               	movwf	?___wmul+1
  2887  0FFD  0874               	movf	___wmul@product,w
  2888  0FFE  00F0               	movwf	?___wmul
  2889  0FFF                     l304:
  2890  0FFF  0008               	return
  2891  1000                     __end_of___wmul:
  2892                           
  2893                           	psect	text7
  2894  00D6                     __ptext7:	
  2895 ;; *************** function _Prender_Verde *****************
  2896 ;; Defined at:
  2897 ;;		line 14 in file "main.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;		None
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;		None
  2902 ;; Return value:  Size  Location     Type
  2903 ;;                  1    wreg      void 
  2904 ;; Registers used:
  2905 ;;		None
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2911 ;;      Params:         0       0       0       0       0
  2912 ;;      Locals:         0       0       0       0       0
  2913 ;;      Temps:          0       0       0       0       0
  2914 ;;      Totals:         0       0       0       0       0
  2915 ;;Total ram usage:        0 bytes
  2916 ;; Hardware stack levels used: 1
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_main
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924  00D6                     _Prender_Verde:	
  2925                           ;psect for function _Prender_Verde
  2926                           
  2927  00D6                     l1410:	
  2928                           ;incstack = 0
  2929                           ; Regs used in _Prender_Verde: []
  2930                           
  2931                           
  2932                           ;main.c: 15:     RC0 = 1;
  2933  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  2934  00D7  1303               	bcf	3,6	;RP1=0, select bank0
  2935  00D8  1407               	bsf	7,0	;volatile
  2936  00D9                     l90:
  2937  00D9  0008               	return
  2938  00DA                     __end_of_Prender_Verde:
  2939                           
  2940                           	psect	text8
  2941  0F87                     __ptext8:	
  2942 ;; *************** function _Prender_Rojo *****************
  2943 ;; Defined at:
  2944 ;;		line 20 in file "main.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;		None
  2947 ;; Auto vars:     Size  Location     Type
  2948 ;;		None
  2949 ;; Return value:  Size  Location     Type
  2950 ;;                  1    wreg      void 
  2951 ;; Registers used:
  2952 ;;		None
  2953 ;; Tracked objects:
  2954 ;;		On entry : 0/0
  2955 ;;		On exit  : 0/0
  2956 ;;		Unchanged: 0/0
  2957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2958 ;;      Params:         0       0       0       0       0
  2959 ;;      Locals:         0       0       0       0       0
  2960 ;;      Temps:          0       0       0       0       0
  2961 ;;      Totals:         0       0       0       0       0
  2962 ;;Total ram usage:        0 bytes
  2963 ;; Hardware stack levels used: 1
  2964 ;; This function calls:
  2965 ;;		Nothing
  2966 ;; This function is called by:
  2967 ;;		_main
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971  0F87                     _Prender_Rojo:	
  2972                           ;psect for function _Prender_Rojo
  2973                           
  2974  0F87                     l1414:	
  2975                           ;incstack = 0
  2976                           ; Regs used in _Prender_Rojo: []
  2977                           
  2978                           
  2979                           ;main.c: 21:     RC1 = 1;
  2980  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  2981  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  2982  0F89  1487               	bsf	7,1	;volatile
  2983  0F8A                     l96:
  2984  0F8A  0008               	return
  2985  0F8B                     __end_of_Prender_Rojo:
  2986                           
  2987                           	psect	text9
  2988  02D0                     __ptext9:	
  2989 ;; *************** function _Leer_tecla *****************
  2990 ;; Defined at:
  2991 ;;		line 13 in file "teclado.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;		None
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      unsigned char 
  2998 ;; Registers used:
  2999 ;;		wreg, status,2
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3005 ;;      Params:         0       0       0       0       0
  3006 ;;      Locals:         0       0       0       0       0
  3007 ;;      Temps:          2       0       0       0       0
  3008 ;;      Totals:         2       0       0       0       0
  3009 ;;Total ram usage:        2 bytes
  3010 ;; Hardware stack levels used: 1
  3011 ;; This function calls:
  3012 ;;		Nothing
  3013 ;; This function is called by:
  3014 ;;		_main
  3015 ;; This function uses a non-reentrant model
  3016 ;;
  3017                           
  3018  02D0                     _Leer_tecla:	
  3019                           ;psect for function _Leer_tecla
  3020                           
  3021  02D0                     l1436:	
  3022                           ;incstack = 0
  3023                           ; Regs used in _Leer_tecla: [wreg+status,2]
  3024                           
  3025                           
  3026                           ;teclado.c: 15:     x=100;
  3027  02D0  3064               	movlw	100
  3028  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  3029  02D2  1303               	bcf	3,6	;RP1=0, select bank0
  3030  02D3  00C5               	movwf	_x
  3031  02D4  3000               	movlw	0
  3032  02D5  00C6               	movwf	_x+1
  3033                           
  3034                           ;teclado.c: 17:       PORTB=1;
  3035  02D6  3001               	movlw	1
  3036  02D7  0086               	movwf	6	;volatile
  3037                           
  3038                           ;teclado.c: 18:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3039  02D8  300D               	movlw	13
  3040  02D9  00F1               	movwf	??_Leer_tecla+1
  3041  02DA  30FB               	movlw	251
  3042  02DB  00F0               	movwf	??_Leer_tecla
  3043  02DC                     u1407:
  3044  02DC  0BF0               	decfsz	??_Leer_tecla,f
  3045  02DD  2ADC               	goto	u1407
  3046  02DE  0BF1               	decfsz	??_Leer_tecla+1,f
  3047  02DF  2ADC               	goto	u1407
  3048  02E0  2AE1               	nop2
  3049  02E1                     l1438:
  3050                           
  3051                           ;teclado.c: 19:       if (RB4) {
  3052  02E1  1283               	bcf	3,5	;RP0=0, select bank0
  3053  02E2  1303               	bcf	3,6	;RP1=0, select bank0
  3054  02E3  1E06               	btfss	6,4	;volatile
  3055  02E4  2AE6               	goto	u891
  3056  02E5  2AE7               	goto	u890
  3057  02E6                     u891:
  3058  02E6  2AEC               	goto	l168
  3059  02E7                     u890:
  3060  02E7                     l1440:
  3061                           
  3062                           ;teclado.c: 20:           x = 1;
  3063  02E7  3001               	movlw	1
  3064  02E8  00C5               	movwf	_x
  3065  02E9  3000               	movlw	0
  3066  02EA  00C6               	movwf	_x+1
  3067                           
  3068                           ;teclado.c: 21:       }
  3069  02EB  2AFD               	goto	l169
  3070  02EC                     l168:	
  3071                           ;teclado.c: 22:       else if (RB5) {
  3072                           
  3073  02EC  1E86               	btfss	6,5	;volatile
  3074  02ED  2AEF               	goto	u901
  3075  02EE  2AF0               	goto	u900
  3076  02EF                     u901:
  3077  02EF  2AF5               	goto	l170
  3078  02F0                     u900:
  3079  02F0                     l1442:
  3080                           
  3081                           ;teclado.c: 23:           x = 2;
  3082  02F0  3002               	movlw	2
  3083  02F1  00C5               	movwf	_x
  3084  02F2  3000               	movlw	0
  3085  02F3  00C6               	movwf	_x+1
  3086                           
  3087                           ;teclado.c: 24:       }
  3088  02F4  2AFD               	goto	l169
  3089  02F5                     l170:	
  3090                           ;teclado.c: 25:       else if (RB6) {
  3091                           
  3092  02F5  1F06               	btfss	6,6	;volatile
  3093  02F6  2AF8               	goto	u911
  3094  02F7  2AF9               	goto	u910
  3095  02F8                     u911:
  3096  02F8  2AFD               	goto	l169
  3097  02F9                     u910:
  3098  02F9                     l1444:
  3099                           
  3100                           ;teclado.c: 26:           x = 3;
  3101  02F9  3003               	movlw	3
  3102  02FA  00C5               	movwf	_x
  3103  02FB  3000               	movlw	0
  3104  02FC  00C6               	movwf	_x+1
  3105  02FD                     l169:
  3106                           
  3107                           ;teclado.c: 28:       PORTB=2;
  3108  02FD  3002               	movlw	2
  3109  02FE  0086               	movwf	6	;volatile
  3110                           
  3111                           ;teclado.c: 29:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3112  02FF  300D               	movlw	13
  3113  0300  00F1               	movwf	??_Leer_tecla+1
  3114  0301  30FB               	movlw	251
  3115  0302  00F0               	movwf	??_Leer_tecla
  3116  0303                     u1417:
  3117  0303  0BF0               	decfsz	??_Leer_tecla,f
  3118  0304  2B03               	goto	u1417
  3119  0305  0BF1               	decfsz	??_Leer_tecla+1,f
  3120  0306  2B03               	goto	u1417
  3121  0307  2B08               	nop2
  3122  0308                     l1446:
  3123                           
  3124                           ;teclado.c: 30:       if (RB4) {
  3125  0308  1283               	bcf	3,5	;RP0=0, select bank0
  3126  0309  1303               	bcf	3,6	;RP1=0, select bank0
  3127  030A  1E06               	btfss	6,4	;volatile
  3128  030B  2B0D               	goto	u921
  3129  030C  2B0E               	goto	u920
  3130  030D                     u921:
  3131  030D  2B13               	goto	l173
  3132  030E                     u920:
  3133  030E                     l1448:
  3134                           
  3135                           ;teclado.c: 31:           x = 4;
  3136  030E  3004               	movlw	4
  3137  030F  00C5               	movwf	_x
  3138  0310  3000               	movlw	0
  3139  0311  00C6               	movwf	_x+1
  3140                           
  3141                           ;teclado.c: 32:       }
  3142  0312  2B24               	goto	l174
  3143  0313                     l173:	
  3144                           ;teclado.c: 33:       else if (RB5) {
  3145                           
  3146  0313  1E86               	btfss	6,5	;volatile
  3147  0314  2B16               	goto	u931
  3148  0315  2B17               	goto	u930
  3149  0316                     u931:
  3150  0316  2B1C               	goto	l175
  3151  0317                     u930:
  3152  0317                     l1450:
  3153                           
  3154                           ;teclado.c: 34:           x = 5;
  3155  0317  3005               	movlw	5
  3156  0318  00C5               	movwf	_x
  3157  0319  3000               	movlw	0
  3158  031A  00C6               	movwf	_x+1
  3159                           
  3160                           ;teclado.c: 35:       }
  3161  031B  2B24               	goto	l174
  3162  031C                     l175:	
  3163                           ;teclado.c: 36:       else if (RB6) {
  3164                           
  3165  031C  1F06               	btfss	6,6	;volatile
  3166  031D  2B1F               	goto	u941
  3167  031E  2B20               	goto	u940
  3168  031F                     u941:
  3169  031F  2B24               	goto	l174
  3170  0320                     u940:
  3171  0320                     l1452:
  3172                           
  3173                           ;teclado.c: 37:           x = 6;
  3174  0320  3006               	movlw	6
  3175  0321  00C5               	movwf	_x
  3176  0322  3000               	movlw	0
  3177  0323  00C6               	movwf	_x+1
  3178  0324                     l174:
  3179                           
  3180                           ;teclado.c: 39:       PORTB=4;
  3181  0324  3004               	movlw	4
  3182  0325  0086               	movwf	6	;volatile
  3183                           
  3184                           ;teclado.c: 40:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3185  0326  300D               	movlw	13
  3186  0327  00F1               	movwf	??_Leer_tecla+1
  3187  0328  30FB               	movlw	251
  3188  0329  00F0               	movwf	??_Leer_tecla
  3189  032A                     u1427:
  3190  032A  0BF0               	decfsz	??_Leer_tecla,f
  3191  032B  2B2A               	goto	u1427
  3192  032C  0BF1               	decfsz	??_Leer_tecla+1,f
  3193  032D  2B2A               	goto	u1427
  3194  032E  2B2F               	nop2
  3195  032F                     l1454:
  3196                           
  3197                           ;teclado.c: 41:       if (RB4) {
  3198  032F  1283               	bcf	3,5	;RP0=0, select bank0
  3199  0330  1303               	bcf	3,6	;RP1=0, select bank0
  3200  0331  1E06               	btfss	6,4	;volatile
  3201  0332  2B34               	goto	u951
  3202  0333  2B35               	goto	u950
  3203  0334                     u951:
  3204  0334  2B3A               	goto	l178
  3205  0335                     u950:
  3206  0335                     l1456:
  3207                           
  3208                           ;teclado.c: 42:           x = 7;
  3209  0335  3007               	movlw	7
  3210  0336  00C5               	movwf	_x
  3211  0337  3000               	movlw	0
  3212  0338  00C6               	movwf	_x+1
  3213                           
  3214                           ;teclado.c: 43:       }
  3215  0339  2B4B               	goto	l179
  3216  033A                     l178:	
  3217                           ;teclado.c: 44:       else if (RB5) {
  3218                           
  3219  033A  1E86               	btfss	6,5	;volatile
  3220  033B  2B3D               	goto	u961
  3221  033C  2B3E               	goto	u960
  3222  033D                     u961:
  3223  033D  2B43               	goto	l180
  3224  033E                     u960:
  3225  033E                     l1458:
  3226                           
  3227                           ;teclado.c: 45:           x = 8;
  3228  033E  3008               	movlw	8
  3229  033F  00C5               	movwf	_x
  3230  0340  3000               	movlw	0
  3231  0341  00C6               	movwf	_x+1
  3232                           
  3233                           ;teclado.c: 46:       }
  3234  0342  2B4B               	goto	l179
  3235  0343                     l180:	
  3236                           ;teclado.c: 47:       else if (RB6) {
  3237                           
  3238  0343  1F06               	btfss	6,6	;volatile
  3239  0344  2B46               	goto	u971
  3240  0345  2B47               	goto	u970
  3241  0346                     u971:
  3242  0346  2B4B               	goto	l179
  3243  0347                     u970:
  3244  0347                     l1460:
  3245                           
  3246                           ;teclado.c: 48:           x = 9;
  3247  0347  3009               	movlw	9
  3248  0348  00C5               	movwf	_x
  3249  0349  3000               	movlw	0
  3250  034A  00C6               	movwf	_x+1
  3251  034B                     l179:
  3252                           
  3253                           ;teclado.c: 50:       PORTB=8;
  3254  034B  3008               	movlw	8
  3255  034C  0086               	movwf	6	;volatile
  3256                           
  3257                           ;teclado.c: 51:       _delay((unsigned long)((10)*(4000000/4000.0)));
  3258  034D  300D               	movlw	13
  3259  034E  00F1               	movwf	??_Leer_tecla+1
  3260  034F  30FB               	movlw	251
  3261  0350  00F0               	movwf	??_Leer_tecla
  3262  0351                     u1437:
  3263  0351  0BF0               	decfsz	??_Leer_tecla,f
  3264  0352  2B51               	goto	u1437
  3265  0353  0BF1               	decfsz	??_Leer_tecla+1,f
  3266  0354  2B51               	goto	u1437
  3267  0355  2B56               	nop2
  3268  0356                     l1462:
  3269                           
  3270                           ;teclado.c: 52:       if (RB4) {
  3271  0356  1283               	bcf	3,5	;RP0=0, select bank0
  3272  0357  1303               	bcf	3,6	;RP1=0, select bank0
  3273  0358  1E06               	btfss	6,4	;volatile
  3274  0359  2B5B               	goto	u981
  3275  035A  2B5C               	goto	u980
  3276  035B                     u981:
  3277  035B  2B61               	goto	l183
  3278  035C                     u980:
  3279  035C                     l1464:
  3280                           
  3281                           ;teclado.c: 53:           x = 42;
  3282  035C  302A               	movlw	42
  3283  035D  00C5               	movwf	_x
  3284  035E  3000               	movlw	0
  3285  035F  00C6               	movwf	_x+1
  3286                           
  3287                           ;teclado.c: 54:       }
  3288  0360  2B70               	goto	l184
  3289  0361                     l183:	
  3290                           ;teclado.c: 55:       else if (RB5) {
  3291                           
  3292  0361  1E86               	btfss	6,5	;volatile
  3293  0362  2B64               	goto	u991
  3294  0363  2B65               	goto	u990
  3295  0364                     u991:
  3296  0364  2B68               	goto	l185
  3297  0365                     u990:
  3298  0365                     l1466:
  3299                           
  3300                           ;teclado.c: 56:           x = 0;
  3301  0365  01C5               	clrf	_x
  3302  0366  01C6               	clrf	_x+1
  3303                           
  3304                           ;teclado.c: 57:       }
  3305  0367  2B70               	goto	l184
  3306  0368                     l185:	
  3307                           ;teclado.c: 58:       else if (RB6) {
  3308                           
  3309  0368  1F06               	btfss	6,6	;volatile
  3310  0369  2B6B               	goto	u1001
  3311  036A  2B6C               	goto	u1000
  3312  036B                     u1001:
  3313  036B  2B70               	goto	l184
  3314  036C                     u1000:
  3315  036C                     l1468:
  3316                           
  3317                           ;teclado.c: 59:           x = 35;
  3318  036C  3023               	movlw	35
  3319  036D  00C5               	movwf	_x
  3320  036E  3000               	movlw	0
  3321  036F  00C6               	movwf	_x+1
  3322  0370                     l184:
  3323                           
  3324                           ;teclado.c: 61:     return x;
  3325  0370  0845               	movf	_x,w
  3326  0371                     l188:
  3327  0371  0008               	return
  3328  0372                     __end_of_Leer_tecla:
  3329                           
  3330                           	psect	text10
  3331  019B                     __ptext10:	
  3332 ;; *************** function _Lcd_Write_String *****************
  3333 ;; Defined at:
  3334 ;;		line 105 in file "lcd.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  a               2    5[COMMON] PTR unsigned char 
  3337 ;;		 -> STR_15(9), STR_14(14), STR_13(11), STR_12(17), 
  3338 ;;		 -> STR_11(10), STR_10(11), STR_9(11), STR_8(8), 
  3339 ;;		 -> STR_7(10), main@Cadena(20), STR_2(12), STR_1(10), 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  i               2   10[COMMON] int 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3351 ;;      Params:         2       0       0       0       0
  3352 ;;      Locals:         2       0       0       0       0
  3353 ;;      Temps:          3       0       0       0       0
  3354 ;;      Totals:         7       0       0       0       0
  3355 ;;Total ram usage:        7 bytes
  3356 ;; Hardware stack levels used: 1
  3357 ;; Hardware stack levels required when called: 2
  3358 ;; This function calls:
  3359 ;;		_Lcd_Write_Char
  3360 ;; This function is called by:
  3361 ;;		_main
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365  019B                     _Lcd_Write_String:	
  3366                           ;psect for function _Lcd_Write_String
  3367                           
  3368  019B                     l1402:	
  3369                           ;incstack = 0
  3370                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3371                           
  3372                           
  3373                           ;lcd.c: 105: void Lcd_Write_String(char *a);lcd.c: 106: {;lcd.c: 107:  int i;;lcd.c: 108
      +                          :  for(i=0;a[i]!='\0';i++)
  3374  019B  01FA               	clrf	Lcd_Write_String@i
  3375  019C  01FB               	clrf	Lcd_Write_String@i+1
  3376  019D  29C0               	goto	l1408
  3377  019E                     l1404:
  3378                           
  3379                           ;lcd.c: 109:     Lcd_Write_Char(a[i]);
  3380  019E  087A               	movf	Lcd_Write_String@i,w
  3381  019F  0775               	addwf	Lcd_Write_String@a,w
  3382  01A0  00F8               	movwf	??_Lcd_Write_String+1
  3383  01A1  0876               	movf	Lcd_Write_String@a+1,w
  3384  01A2  00F7               	movwf	??_Lcd_Write_String
  3385  01A3  1803               	skipnc
  3386  01A4  0AF7               	incf	??_Lcd_Write_String,f
  3387  01A5  1FFA               	btfss	Lcd_Write_String@i,7
  3388  01A6  29A8               	goto	u850
  3389  01A7  03F7               	decf	??_Lcd_Write_String,f
  3390  01A8                     u850:
  3391  01A8  0877               	movf	??_Lcd_Write_String,w
  3392  01A9  00F9               	movwf	??_Lcd_Write_String+2
  3393  01AA  0879               	movf	??_Lcd_Write_String+2,w
  3394  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  3395  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  3396  01AD  00FF               	movwf	btemp+1
  3397  01AE  0878               	movf	??_Lcd_Write_String+1,w
  3398  01AF  0084               	movwf	4
  3399  01B0  120A  118A  2003  120A  118A  	fcall	stringtab
  3400  01B5  120A  118A  212A  120A  118A  	fcall	_Lcd_Write_Char
  3401  01BA                     l1406:
  3402  01BA  3001               	movlw	1
  3403  01BB  07FA               	addwf	Lcd_Write_String@i,f
  3404  01BC  1803               	skipnc
  3405  01BD  0AFB               	incf	Lcd_Write_String@i+1,f
  3406  01BE  3000               	movlw	0
  3407  01BF  07FB               	addwf	Lcd_Write_String@i+1,f
  3408  01C0                     l1408:
  3409  01C0  087A               	movf	Lcd_Write_String@i,w
  3410  01C1  0775               	addwf	Lcd_Write_String@a,w
  3411  01C2  00F8               	movwf	??_Lcd_Write_String+1
  3412  01C3  0876               	movf	Lcd_Write_String@a+1,w
  3413  01C4  00F7               	movwf	??_Lcd_Write_String
  3414  01C5  1803               	skipnc
  3415  01C6  0AF7               	incf	??_Lcd_Write_String,f
  3416  01C7  1FFA               	btfss	Lcd_Write_String@i,7
  3417  01C8  29CA               	goto	u860
  3418  01C9  03F7               	decf	??_Lcd_Write_String,f
  3419  01CA                     u860:
  3420  01CA  0877               	movf	??_Lcd_Write_String,w
  3421  01CB  00F9               	movwf	??_Lcd_Write_String+2
  3422  01CC  0879               	movf	??_Lcd_Write_String+2,w
  3423  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  3424  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  3425  01CF  00FF               	movwf	btemp+1
  3426  01D0  0878               	movf	??_Lcd_Write_String+1,w
  3427  01D1  0084               	movwf	4
  3428  01D2  120A  118A  2003  120A  118A  	fcall	stringtab
  3429  01D7  3A00               	xorlw	0
  3430  01D8  1D03               	skipz
  3431  01D9  29DB               	goto	u871
  3432  01DA  29DC               	goto	u870
  3433  01DB                     u871:
  3434  01DB  299E               	goto	l1404
  3435  01DC                     u870:
  3436  01DC                     l49:
  3437  01DC  0008               	return
  3438  01DD                     __end_of_Lcd_Write_String:
  3439                           
  3440                           	psect	text11
  3441  012A                     __ptext11:	
  3442 ;; *************** function _Lcd_Write_Char *****************
  3443 ;; Defined at:
  3444 ;;		line 89 in file "lcd.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  a               1    wreg     unsigned char 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  a               1    4[COMMON] unsigned char 
  3449 ;;  y               1    3[COMMON] unsigned char 
  3450 ;;  temp            1    2[COMMON] unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  1    wreg      void 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0, pclath, cstack
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3460 ;;      Params:         0       0       0       0       0
  3461 ;;      Locals:         3       0       0       0       0
  3462 ;;      Temps:          1       0       0       0       0
  3463 ;;      Totals:         4       0       0       0       0
  3464 ;;Total ram usage:        4 bytes
  3465 ;; Hardware stack levels used: 1
  3466 ;; Hardware stack levels required when called: 1
  3467 ;; This function calls:
  3468 ;;		_Lcd_Port
  3469 ;; This function is called by:
  3470 ;;		_Lcd_Write_String
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474  012A                     _Lcd_Write_Char:	
  3475                           ;psect for function _Lcd_Write_Char
  3476                           
  3477                           
  3478                           ;incstack = 0
  3479                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3480                           ;Lcd_Write_Char@a stored from wreg
  3481  012A  00F4               	movwf	Lcd_Write_Char@a
  3482  012B                     l1302:
  3483                           
  3484                           ;lcd.c: 89: void Lcd_Write_Char(char a);lcd.c: 90: {;lcd.c: 91:    char temp,y;;lcd.c: 9
      +                          2:    temp = a&0x0F;
  3485  012B  0874               	movf	Lcd_Write_Char@a,w
  3486  012C  390F               	andlw	15
  3487  012D  00F1               	movwf	??_Lcd_Write_Char
  3488  012E  0871               	movf	??_Lcd_Write_Char,w
  3489  012F  00F2               	movwf	Lcd_Write_Char@temp
  3490                           
  3491                           ;lcd.c: 93:    y = a&0xF0;
  3492  0130  0874               	movf	Lcd_Write_Char@a,w
  3493  0131  39F0               	andlw	240
  3494  0132  00F1               	movwf	??_Lcd_Write_Char
  3495  0133  0871               	movf	??_Lcd_Write_Char,w
  3496  0134  00F3               	movwf	Lcd_Write_Char@y
  3497  0135                     l1304:
  3498                           
  3499                           ;lcd.c: 94:    RD2 = 1;
  3500  0135  1283               	bcf	3,5	;RP0=0, select bank0
  3501  0136  1303               	bcf	3,6	;RP1=0, select bank0
  3502  0137  1508               	bsf	8,2	;volatile
  3503  0138                     l1306:
  3504                           
  3505                           ;lcd.c: 95:    Lcd_Port(y>>4);
  3506  0138  0873               	movf	Lcd_Write_Char@y,w
  3507  0139  00F1               	movwf	??_Lcd_Write_Char
  3508  013A  3004               	movlw	4
  3509  013B                     u675:
  3510  013B  1003               	clrc
  3511  013C  0CF1               	rrf	??_Lcd_Write_Char,f
  3512  013D  3EFF               	addlw	-1
  3513  013E  1D03               	skipz
  3514  013F  293B               	goto	u675
  3515  0140  0871               	movf	??_Lcd_Write_Char,w
  3516  0141  120A  158A  27B9  120A  118A  	fcall	_Lcd_Port
  3517  0146                     l1308:
  3518                           
  3519                           ;lcd.c: 96:    RD3 = 1;
  3520  0146  1283               	bcf	3,5	;RP0=0, select bank0
  3521  0147  1303               	bcf	3,6	;RP1=0, select bank0
  3522  0148  1588               	bsf	8,3	;volatile
  3523  0149                     l1310:
  3524                           
  3525                           ;lcd.c: 97:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3526  0149  300D               	movlw	13
  3527  014A  00F1               	movwf	??_Lcd_Write_Char
  3528  014B                     u1447:
  3529  014B  0BF1               	decfsz	??_Lcd_Write_Char,f
  3530  014C  294B               	goto	u1447
  3531  014D                     l1312:
  3532                           
  3533                           ;lcd.c: 98:    RD3 = 0;
  3534  014D  1283               	bcf	3,5	;RP0=0, select bank0
  3535  014E  1303               	bcf	3,6	;RP1=0, select bank0
  3536  014F  1188               	bcf	8,3	;volatile
  3537  0150                     l1314:
  3538                           
  3539                           ;lcd.c: 99:    Lcd_Port(temp);
  3540  0150  0872               	movf	Lcd_Write_Char@temp,w
  3541  0151  120A  158A  27B9  120A  118A  	fcall	_Lcd_Port
  3542  0156                     l1316:
  3543                           
  3544                           ;lcd.c: 100:    RD3 = 1;
  3545  0156  1283               	bcf	3,5	;RP0=0, select bank0
  3546  0157  1303               	bcf	3,6	;RP1=0, select bank0
  3547  0158  1588               	bsf	8,3	;volatile
  3548  0159                     l1318:
  3549                           
  3550                           ;lcd.c: 101:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3551  0159  300D               	movlw	13
  3552  015A  00F1               	movwf	??_Lcd_Write_Char
  3553  015B                     u1457:
  3554  015B  0BF1               	decfsz	??_Lcd_Write_Char,f
  3555  015C  295B               	goto	u1457
  3556  015D                     l1320:
  3557                           
  3558                           ;lcd.c: 102:    RD3 = 0;
  3559  015D  1283               	bcf	3,5	;RP0=0, select bank0
  3560  015E  1303               	bcf	3,6	;RP1=0, select bank0
  3561  015F  1188               	bcf	8,3	;volatile
  3562  0160                     l43:
  3563  0160  0008               	return
  3564  0161                     __end_of_Lcd_Write_Char:
  3565                           
  3566                           	psect	text12
  3567  0221                     __ptext12:	
  3568 ;; *************** function _Lcd_Set_Cursor *****************
  3569 ;; Defined at:
  3570 ;;		line 49 in file "lcd.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;  a               1    wreg     unsigned char 
  3573 ;;  b               1    4[COMMON] unsigned char 
  3574 ;; Auto vars:     Size  Location     Type
  3575 ;;  a               1    7[COMMON] unsigned char 
  3576 ;;  temp            1   10[COMMON] unsigned char 
  3577 ;;  y               1    9[COMMON] unsigned char 
  3578 ;;  z               1    8[COMMON] unsigned char 
  3579 ;; Return value:  Size  Location     Type
  3580 ;;                  1    wreg      void 
  3581 ;; Registers used:
  3582 ;;		wreg, status,2, status,0, pclath, cstack
  3583 ;; Tracked objects:
  3584 ;;		On entry : 0/0
  3585 ;;		On exit  : 0/0
  3586 ;;		Unchanged: 0/0
  3587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3588 ;;      Params:         1       0       0       0       0
  3589 ;;      Locals:         4       0       0       0       0
  3590 ;;      Temps:          2       0       0       0       0
  3591 ;;      Totals:         7       0       0       0       0
  3592 ;;Total ram usage:        7 bytes
  3593 ;; Hardware stack levels used: 1
  3594 ;; Hardware stack levels required when called: 2
  3595 ;; This function calls:
  3596 ;;		_Lcd_Cmd
  3597 ;; This function is called by:
  3598 ;;		_main
  3599 ;; This function uses a non-reentrant model
  3600 ;;
  3601                           
  3602  0221                     _Lcd_Set_Cursor:	
  3603                           ;psect for function _Lcd_Set_Cursor
  3604                           
  3605                           
  3606                           ;incstack = 0
  3607                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3608                           ;Lcd_Set_Cursor@a stored from wreg
  3609  0221  00F7               	movwf	Lcd_Set_Cursor@a
  3610  0222                     l1372:
  3611                           
  3612                           ;lcd.c: 49: void Lcd_Set_Cursor(char a, char b);lcd.c: 50: {;lcd.c: 51:  char temp,z,y;;
      +                          lcd.c: 52:  if(a == 1)
  3613  0222  0377               	decf	Lcd_Set_Cursor@a,w
  3614  0223  1D03               	btfss	3,2
  3615  0224  2A26               	goto	u811
  3616  0225  2A27               	goto	u810
  3617  0226                     u811:
  3618  0226  2A4A               	goto	l1382
  3619  0227                     u810:
  3620  0227                     l1374:
  3621                           
  3622                           ;lcd.c: 53:  {;lcd.c: 54:    temp = 0x80 + b - 1;
  3623  0227  0874               	movf	Lcd_Set_Cursor@b,w
  3624  0228  3E7F               	addlw	127
  3625  0229  00F5               	movwf	??_Lcd_Set_Cursor
  3626  022A  0875               	movf	??_Lcd_Set_Cursor,w
  3627  022B  00FA               	movwf	Lcd_Set_Cursor@temp
  3628                           
  3629                           ;lcd.c: 55:   z = temp>>4;
  3630  022C  087A               	movf	Lcd_Set_Cursor@temp,w
  3631  022D  00F5               	movwf	??_Lcd_Set_Cursor
  3632  022E  3004               	movlw	4
  3633  022F                     u825:
  3634  022F  1003               	clrc
  3635  0230  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3636  0231  3EFF               	addlw	-1
  3637  0232  1D03               	skipz
  3638  0233  2A2F               	goto	u825
  3639  0234  0875               	movf	??_Lcd_Set_Cursor,w
  3640  0235  00F6               	movwf	??_Lcd_Set_Cursor+1
  3641  0236  0876               	movf	??_Lcd_Set_Cursor+1,w
  3642  0237  00F8               	movwf	Lcd_Set_Cursor@z
  3643  0238                     l1376:
  3644                           
  3645                           ;lcd.c: 56:   y = temp & 0x0F;
  3646  0238  087A               	movf	Lcd_Set_Cursor@temp,w
  3647  0239  390F               	andlw	15
  3648  023A  00F5               	movwf	??_Lcd_Set_Cursor
  3649  023B  0875               	movf	??_Lcd_Set_Cursor,w
  3650  023C  00F9               	movwf	Lcd_Set_Cursor@y
  3651  023D                     l1378:
  3652                           
  3653                           ;lcd.c: 57:   Lcd_Cmd(z);
  3654  023D  0878               	movf	Lcd_Set_Cursor@z,w
  3655  023E  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3656  0243                     l1380:
  3657                           
  3658                           ;lcd.c: 58:   Lcd_Cmd(y);
  3659  0243  0879               	movf	Lcd_Set_Cursor@y,w
  3660  0244  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3661                           
  3662                           ;lcd.c: 59:  }
  3663  0249  2A72               	goto	l37
  3664  024A                     l1382:
  3665  024A  3002               	movlw	2
  3666  024B  0677               	xorwf	Lcd_Set_Cursor@a,w
  3667  024C  1D03               	btfss	3,2
  3668  024D  2A4F               	goto	u831
  3669  024E  2A50               	goto	u830
  3670  024F                     u831:
  3671  024F  2A72               	goto	l37
  3672  0250                     u830:
  3673  0250                     l1384:
  3674                           
  3675                           ;lcd.c: 61:  {;lcd.c: 62:   temp = 0xC0 + b - 1;
  3676  0250  0874               	movf	Lcd_Set_Cursor@b,w
  3677  0251  3EBF               	addlw	191
  3678  0252  00F5               	movwf	??_Lcd_Set_Cursor
  3679  0253  0875               	movf	??_Lcd_Set_Cursor,w
  3680  0254  00FA               	movwf	Lcd_Set_Cursor@temp
  3681                           
  3682                           ;lcd.c: 63:   z = temp>>4;
  3683  0255  087A               	movf	Lcd_Set_Cursor@temp,w
  3684  0256  00F5               	movwf	??_Lcd_Set_Cursor
  3685  0257  3004               	movlw	4
  3686  0258                     u845:
  3687  0258  1003               	clrc
  3688  0259  0CF5               	rrf	??_Lcd_Set_Cursor,f
  3689  025A  3EFF               	addlw	-1
  3690  025B  1D03               	skipz
  3691  025C  2A58               	goto	u845
  3692  025D  0875               	movf	??_Lcd_Set_Cursor,w
  3693  025E  00F6               	movwf	??_Lcd_Set_Cursor+1
  3694  025F  0876               	movf	??_Lcd_Set_Cursor+1,w
  3695  0260  00F8               	movwf	Lcd_Set_Cursor@z
  3696  0261                     l1386:
  3697                           
  3698                           ;lcd.c: 64:   y = temp & 0x0F;
  3699  0261  087A               	movf	Lcd_Set_Cursor@temp,w
  3700  0262  390F               	andlw	15
  3701  0263  00F5               	movwf	??_Lcd_Set_Cursor
  3702  0264  0875               	movf	??_Lcd_Set_Cursor,w
  3703  0265  00F9               	movwf	Lcd_Set_Cursor@y
  3704  0266                     l1388:
  3705                           
  3706                           ;lcd.c: 65:   Lcd_Cmd(z);
  3707  0266  0878               	movf	Lcd_Set_Cursor@z,w
  3708  0267  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3709  026C                     l1390:
  3710                           
  3711                           ;lcd.c: 66:   Lcd_Cmd(y);
  3712  026C  0879               	movf	Lcd_Set_Cursor@y,w
  3713  026D  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3714  0272                     l37:
  3715  0272  0008               	return
  3716  0273                     __end_of_Lcd_Set_Cursor:
  3717                           
  3718                           	psect	text13
  3719  0273                     __ptext13:	
  3720 ;; *************** function _Lcd_Init *****************
  3721 ;; Defined at:
  3722 ;;		line 70 in file "lcd.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3736 ;;      Params:         0       0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0
  3738 ;;      Temps:          2       0       0       0       0
  3739 ;;      Totals:         2       0       0       0       0
  3740 ;;Total ram usage:        2 bytes
  3741 ;; Hardware stack levels used: 1
  3742 ;; Hardware stack levels required when called: 2
  3743 ;; This function calls:
  3744 ;;		_Lcd_Cmd
  3745 ;;		_Lcd_Port
  3746 ;; This function is called by:
  3747 ;;		_main
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751  0273                     _Lcd_Init:	
  3752                           ;psect for function _Lcd_Init
  3753                           
  3754  0273                     l1392:	
  3755                           ;incstack = 0
  3756                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3757                           
  3758                           
  3759                           ;lcd.c: 72:   Lcd_Port(0x00);
  3760  0273  3000               	movlw	0
  3761  0274  120A  158A  27B9  120A  118A  	fcall	_Lcd_Port
  3762  0279                     l1394:
  3763                           
  3764                           ;lcd.c: 73:    _delay((unsigned long)((20)*(4000000/4000.0)));
  3765  0279  301A               	movlw	26
  3766  027A  00F5               	movwf	??_Lcd_Init+1
  3767  027B  30F8               	movlw	248
  3768  027C  00F4               	movwf	??_Lcd_Init
  3769  027D                     u1467:
  3770  027D  0BF4               	decfsz	??_Lcd_Init,f
  3771  027E  2A7D               	goto	u1467
  3772  027F  0BF5               	decfsz	??_Lcd_Init+1,f
  3773  0280  2A7D               	goto	u1467
  3774  0281  0000               	nop
  3775  0282                     l1396:
  3776                           
  3777                           ;lcd.c: 74:   Lcd_Cmd(0x03);
  3778  0282  3003               	movlw	3
  3779  0283  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3780                           
  3781                           ;lcd.c: 75:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3782  0288  3007               	movlw	7
  3783  0289  00F5               	movwf	??_Lcd_Init+1
  3784  028A  307D               	movlw	125
  3785  028B  00F4               	movwf	??_Lcd_Init
  3786  028C                     u1477:
  3787  028C  0BF4               	decfsz	??_Lcd_Init,f
  3788  028D  2A8C               	goto	u1477
  3789  028E  0BF5               	decfsz	??_Lcd_Init+1,f
  3790  028F  2A8C               	goto	u1477
  3791  0290                     l1398:
  3792                           
  3793                           ;lcd.c: 76:   Lcd_Cmd(0x03);
  3794  0290  3003               	movlw	3
  3795  0291  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3796  0296                     l1400:
  3797                           
  3798                           ;lcd.c: 77:  _delay((unsigned long)((11)*(4000000/4000.0)));
  3799  0296  300F               	movlw	15
  3800  0297  00F5               	movwf	??_Lcd_Init+1
  3801  0298  3047               	movlw	71
  3802  0299  00F4               	movwf	??_Lcd_Init
  3803  029A                     u1487:
  3804  029A  0BF4               	decfsz	??_Lcd_Init,f
  3805  029B  2A9A               	goto	u1487
  3806  029C  0BF5               	decfsz	??_Lcd_Init+1,f
  3807  029D  2A9A               	goto	u1487
  3808  029E  2A9F               	nop2
  3809                           
  3810                           ;lcd.c: 78:   Lcd_Cmd(0x03);
  3811  029F  3003               	movlw	3
  3812  02A0  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3813                           
  3814                           ;lcd.c: 80:   Lcd_Cmd(0x02);
  3815  02A5  3002               	movlw	2
  3816  02A6  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3817                           
  3818                           ;lcd.c: 81:   Lcd_Cmd(0x02);
  3819  02AB  3002               	movlw	2
  3820  02AC  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3821                           
  3822                           ;lcd.c: 82:   Lcd_Cmd(0x08);
  3823  02B1  3008               	movlw	8
  3824  02B2  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3825                           
  3826                           ;lcd.c: 83:   Lcd_Cmd(0x00);
  3827  02B7  3000               	movlw	0
  3828  02B8  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3829                           
  3830                           ;lcd.c: 84:   Lcd_Cmd(0x0C);
  3831  02BD  300C               	movlw	12
  3832  02BE  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3833                           
  3834                           ;lcd.c: 85:   Lcd_Cmd(0x00);
  3835  02C3  3000               	movlw	0
  3836  02C4  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3837                           
  3838                           ;lcd.c: 86:   Lcd_Cmd(0x06);
  3839  02C9  3006               	movlw	6
  3840  02CA  120A  118A  20DA  120A  118A  	fcall	_Lcd_Cmd
  3841  02CF                     l40:
  3842  02CF  0008               	return
  3843  02D0                     __end_of_Lcd_Init:
  3844                           
  3845                           	psect	text14
  3846  0F93                     __ptext14:	
  3847 ;; *************** function _Lcd_Clear *****************
  3848 ;; Defined at:
  3849 ;;		line 43 in file "lcd.c"
  3850 ;; Parameters:    Size  Location     Type
  3851 ;;		None
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;		None
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0, pclath, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3863 ;;      Params:         0       0       0       0       0
  3864 ;;      Locals:         0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0
  3866 ;;      Totals:         0       0       0       0       0
  3867 ;;Total ram usage:        0 bytes
  3868 ;; Hardware stack levels used: 1
  3869 ;; Hardware stack levels required when called: 2
  3870 ;; This function calls:
  3871 ;;		_Lcd_Cmd
  3872 ;; This function is called by:
  3873 ;;		_main
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877  0F93                     _Lcd_Clear:	
  3878                           ;psect for function _Lcd_Clear
  3879                           
  3880  0F93                     l1370:	
  3881                           ;incstack = 0
  3882                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3883                           
  3884                           
  3885                           ;lcd.c: 45:  Lcd_Cmd(0);
  3886  0F93  3000               	movlw	0
  3887  0F94  120A  118A  20DA  120A  158A  	fcall	_Lcd_Cmd
  3888                           
  3889                           ;lcd.c: 46:  Lcd_Cmd(1);
  3890  0F99  3001               	movlw	1
  3891  0F9A  120A  118A  20DA  120A  158A  	fcall	_Lcd_Cmd
  3892  0F9F                     l31:
  3893  0F9F  0008               	return
  3894  0FA0                     __end_of_Lcd_Clear:
  3895                           
  3896                           	psect	text15
  3897  00DA                     __ptext15:	
  3898 ;; *************** function _Lcd_Cmd *****************
  3899 ;; Defined at:
  3900 ;;		line 34 in file "lcd.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;  a               1    wreg     unsigned char 
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;  a               1    3[COMMON] unsigned char 
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg, status,2, status,0, pclath, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3914 ;;      Params:         0       0       0       0       0
  3915 ;;      Locals:         1       0       0       0       0
  3916 ;;      Temps:          2       0       0       0       0
  3917 ;;      Totals:         3       0       0       0       0
  3918 ;;Total ram usage:        3 bytes
  3919 ;; Hardware stack levels used: 1
  3920 ;; Hardware stack levels required when called: 1
  3921 ;; This function calls:
  3922 ;;		_Lcd_Port
  3923 ;; This function is called by:
  3924 ;;		_Lcd_Clear
  3925 ;;		_Lcd_Set_Cursor
  3926 ;;		_Lcd_Init
  3927 ;;		_Lcd_Shift_Right
  3928 ;;		_Lcd_Shift_Left
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932  00DA                     _Lcd_Cmd:	
  3933                           ;psect for function _Lcd_Cmd
  3934                           
  3935                           
  3936                           ;incstack = 0
  3937                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3938                           ;Lcd_Cmd@a stored from wreg
  3939  00DA  00F3               	movwf	Lcd_Cmd@a
  3940  00DB                     l1292:
  3941                           
  3942                           ;lcd.c: 34: void Lcd_Cmd(char a);lcd.c: 35: {;lcd.c: 36:  RD2 = 0;
  3943  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  3944  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  3945  00DD  1108               	bcf	8,2	;volatile
  3946  00DE                     l1294:
  3947                           
  3948                           ;lcd.c: 37:  Lcd_Port(a);
  3949  00DE  0873               	movf	Lcd_Cmd@a,w
  3950  00DF  120A  158A  27B9  120A  118A  	fcall	_Lcd_Port
  3951  00E4                     l1296:
  3952                           
  3953                           ;lcd.c: 38:  RD3 = 1;
  3954  00E4  1283               	bcf	3,5	;RP0=0, select bank0
  3955  00E5  1303               	bcf	3,6	;RP1=0, select bank0
  3956  00E6  1588               	bsf	8,3	;volatile
  3957  00E7                     l1298:
  3958                           
  3959                           ;lcd.c: 39:         _delay((unsigned long)((4)*(4000000/4000.0)));
  3960  00E7  3006               	movlw	6
  3961  00E8  00F2               	movwf	??_Lcd_Cmd+1
  3962  00E9  3030               	movlw	48
  3963  00EA  00F1               	movwf	??_Lcd_Cmd
  3964  00EB                     u1497:
  3965  00EB  0BF1               	decfsz	??_Lcd_Cmd,f
  3966  00EC  28EB               	goto	u1497
  3967  00ED  0BF2               	decfsz	??_Lcd_Cmd+1,f
  3968  00EE  28EB               	goto	u1497
  3969  00EF  0000               	nop
  3970  00F0                     l1300:
  3971                           
  3972                           ;lcd.c: 40:         RD3 = 0;
  3973  00F0  1283               	bcf	3,5	;RP0=0, select bank0
  3974  00F1  1303               	bcf	3,6	;RP1=0, select bank0
  3975  00F2  1188               	bcf	8,3	;volatile
  3976  00F3                     l28:
  3977  00F3  0008               	return
  3978  00F4                     __end_of_Lcd_Cmd:
  3979                           
  3980                           	psect	text16
  3981  0FB9                     __ptext16:	
  3982 ;; *************** function _Lcd_Port *****************
  3983 ;; Defined at:
  3984 ;;		line 12 in file "lcd.c"
  3985 ;; Parameters:    Size  Location     Type
  3986 ;;  a               1    wreg     unsigned char 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;  a               1    0[COMMON] unsigned char 
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3998 ;;      Params:         0       0       0       0       0
  3999 ;;      Locals:         1       0       0       0       0
  4000 ;;      Temps:          0       0       0       0       0
  4001 ;;      Totals:         1       0       0       0       0
  4002 ;;Total ram usage:        1 bytes
  4003 ;; Hardware stack levels used: 1
  4004 ;; This function calls:
  4005 ;;		Nothing
  4006 ;; This function is called by:
  4007 ;;		_Lcd_Cmd
  4008 ;;		_Lcd_Init
  4009 ;;		_Lcd_Write_Char
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013  0FB9                     _Lcd_Port:	
  4014                           ;psect for function _Lcd_Port
  4015                           
  4016                           
  4017                           ;incstack = 0
  4018                           ; Regs used in _Lcd_Port: [wreg]
  4019                           ;Lcd_Port@a stored from wreg
  4020  0FB9  00F0               	movwf	Lcd_Port@a
  4021  0FBA                     l1282:
  4022                           
  4023                           ;lcd.c: 12: void Lcd_Port(char a);lcd.c: 13: {;lcd.c: 14:  if(a & 1)
  4024  0FBA  1C70               	btfss	Lcd_Port@a,0
  4025  0FBB  2FBD               	goto	u631
  4026  0FBC  2FBE               	goto	u630
  4027  0FBD                     u631:
  4028  0FBD  2FC2               	goto	l17
  4029  0FBE                     u630:
  4030  0FBE                     l1284:
  4031                           
  4032                           ;lcd.c: 15:   RD4 = 1;
  4033  0FBE  1283               	bcf	3,5	;RP0=0, select bank0
  4034  0FBF  1303               	bcf	3,6	;RP1=0, select bank0
  4035  0FC0  1608               	bsf	8,4	;volatile
  4036  0FC1  2FC5               	goto	l18
  4037  0FC2                     l17:	
  4038                           ;lcd.c: 16:  else
  4039                           
  4040                           
  4041                           ;lcd.c: 17:   RD4 = 0;
  4042  0FC2  1283               	bcf	3,5	;RP0=0, select bank0
  4043  0FC3  1303               	bcf	3,6	;RP1=0, select bank0
  4044  0FC4  1208               	bcf	8,4	;volatile
  4045  0FC5                     l18:
  4046                           
  4047                           ;lcd.c: 19:  if(a & 2)
  4048  0FC5  1CF0               	btfss	Lcd_Port@a,1
  4049  0FC6  2FC8               	goto	u641
  4050  0FC7  2FC9               	goto	u640
  4051  0FC8                     u641:
  4052  0FC8  2FCB               	goto	l19
  4053  0FC9                     u640:
  4054  0FC9                     l1286:
  4055                           
  4056                           ;lcd.c: 20:   RD5 = 1;
  4057  0FC9  1688               	bsf	8,5	;volatile
  4058  0FCA  2FCC               	goto	l20
  4059  0FCB                     l19:	
  4060                           ;lcd.c: 21:  else
  4061                           
  4062                           
  4063                           ;lcd.c: 22:   RD5 = 0;
  4064  0FCB  1288               	bcf	8,5	;volatile
  4065  0FCC                     l20:
  4066                           
  4067                           ;lcd.c: 24:  if(a & 4)
  4068  0FCC  1D70               	btfss	Lcd_Port@a,2
  4069  0FCD  2FCF               	goto	u651
  4070  0FCE  2FD0               	goto	u650
  4071  0FCF                     u651:
  4072  0FCF  2FD2               	goto	l21
  4073  0FD0                     u650:
  4074  0FD0                     l1288:
  4075                           
  4076                           ;lcd.c: 25:   RD6 = 1;
  4077  0FD0  1708               	bsf	8,6	;volatile
  4078  0FD1  2FD3               	goto	l22
  4079  0FD2                     l21:	
  4080                           ;lcd.c: 26:  else
  4081                           
  4082                           
  4083                           ;lcd.c: 27:   RD6 = 0;
  4084  0FD2  1308               	bcf	8,6	;volatile
  4085  0FD3                     l22:
  4086                           
  4087                           ;lcd.c: 29:  if(a & 8)
  4088  0FD3  1DF0               	btfss	Lcd_Port@a,3
  4089  0FD4  2FD6               	goto	u661
  4090  0FD5  2FD7               	goto	u660
  4091  0FD6                     u661:
  4092  0FD6  2FD9               	goto	l23
  4093  0FD7                     u660:
  4094  0FD7                     l1290:
  4095                           
  4096                           ;lcd.c: 30:   RD7 = 1;
  4097  0FD7  1788               	bsf	8,7	;volatile
  4098  0FD8  2FDA               	goto	l25
  4099  0FD9                     l23:	
  4100                           ;lcd.c: 31:  else
  4101                           
  4102                           
  4103                           ;lcd.c: 32:   RD7 = 0;
  4104  0FD9  1388               	bcf	8,7	;volatile
  4105  0FDA                     l25:
  4106  0FDA  0008               	return
  4107  0FDB                     __end_of_Lcd_Port:
  4108                           
  4109                           	psect	text17
  4110  0F83                     __ptext17:	
  4111 ;; *************** function _Apagar_Verde *****************
  4112 ;; Defined at:
  4113 ;;		line 17 in file "main.c"
  4114 ;; Parameters:    Size  Location     Type
  4115 ;;		None
  4116 ;; Auto vars:     Size  Location     Type
  4117 ;;		None
  4118 ;; Return value:  Size  Location     Type
  4119 ;;                  1    wreg      void 
  4120 ;; Registers used:
  4121 ;;		None
  4122 ;; Tracked objects:
  4123 ;;		On entry : 0/0
  4124 ;;		On exit  : 0/0
  4125 ;;		Unchanged: 0/0
  4126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4127 ;;      Params:         0       0       0       0       0
  4128 ;;      Locals:         0       0       0       0       0
  4129 ;;      Temps:          0       0       0       0       0
  4130 ;;      Totals:         0       0       0       0       0
  4131 ;;Total ram usage:        0 bytes
  4132 ;; Hardware stack levels used: 1
  4133 ;; This function calls:
  4134 ;;		Nothing
  4135 ;; This function is called by:
  4136 ;;		_main
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140  0F83                     _Apagar_Verde:	
  4141                           ;psect for function _Apagar_Verde
  4142                           
  4143  0F83                     l1412:	
  4144                           ;incstack = 0
  4145                           ; Regs used in _Apagar_Verde: []
  4146                           
  4147                           
  4148                           ;main.c: 18:     RC0 = 0;
  4149  0F83  1283               	bcf	3,5	;RP0=0, select bank0
  4150  0F84  1303               	bcf	3,6	;RP1=0, select bank0
  4151  0F85  1007               	bcf	7,0	;volatile
  4152  0F86                     l93:
  4153  0F86  0008               	return
  4154  0F87                     __end_of_Apagar_Verde:
  4155                           
  4156                           	psect	text18
  4157  0F7F                     __ptext18:	
  4158 ;; *************** function _Apagar_Rojo *****************
  4159 ;; Defined at:
  4160 ;;		line 23 in file "main.c"
  4161 ;; Parameters:    Size  Location     Type
  4162 ;;		None
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;		None
  4165 ;; Return value:  Size  Location     Type
  4166 ;;                  1    wreg      void 
  4167 ;; Registers used:
  4168 ;;		None
  4169 ;; Tracked objects:
  4170 ;;		On entry : 0/0
  4171 ;;		On exit  : 0/0
  4172 ;;		Unchanged: 0/0
  4173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4174 ;;      Params:         0       0       0       0       0
  4175 ;;      Locals:         0       0       0       0       0
  4176 ;;      Temps:          0       0       0       0       0
  4177 ;;      Totals:         0       0       0       0       0
  4178 ;;Total ram usage:        0 bytes
  4179 ;; Hardware stack levels used: 1
  4180 ;; This function calls:
  4181 ;;		Nothing
  4182 ;; This function is called by:
  4183 ;;		_main
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187  0F7F                     _Apagar_Rojo:	
  4188                           ;psect for function _Apagar_Rojo
  4189                           
  4190  0F7F                     l1416:	
  4191                           ;incstack = 0
  4192                           ; Regs used in _Apagar_Rojo: []
  4193                           
  4194                           
  4195                           ;main.c: 24:     RC1 = 0;
  4196  0F7F  1283               	bcf	3,5	;RP0=0, select bank0
  4197  0F80  1303               	bcf	3,6	;RP1=0, select bank0
  4198  0F81  1087               	bcf	7,1	;volatile
  4199  0F82                     l99:
  4200  0F82  0008               	return
  4201  0F83                     __end_of_Apagar_Rojo:
  4202  007E                     btemp	set	126	;btemp
  4203  007E                     wtemp0	set	126
  4204                           
  4205                           	psect	config
  4206                           
  4207                           ;Config register CONFIG1 @ 0x2007
  4208                           ;	Oscillator Selection bits
  4209                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  4210                           ;	Watchdog Timer Enable bit
  4211                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  4212                           ;	Power-up Timer Enable bit
  4213                           ;	PWRTE = OFF, PWRT disabled
  4214                           ;	RE3/MCLR pin function select bit
  4215                           ;	MCLRE = 0x1, unprogrammed default
  4216                           ;	Code Protection bit
  4217                           ;	CP = OFF, Program memory code protection is disabled
  4218                           ;	Data Code Protection bit
  4219                           ;	CPD = OFF, Data memory code protection is disabled
  4220                           ;	Brown Out Reset Selection bits
  4221                           ;	BOREN = ON, BOR enabled
  4222                           ;	Internal External Switchover bit
  4223                           ;	IESO = 0x1, unprogrammed default
  4224                           ;	Fail-Safe Clock Monitor Enabled bit
  4225                           ;	FCMEN = 0x1, unprogrammed default
  4226                           ;	Low Voltage Programming Enable bit
  4227                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  4228                           ;	In-Circuit Debugger Mode bit
  4229                           ;	DEBUG = 0x1, unprogrammed default
  4230  2007                     	org	8199
  4231  2007  2FF2               	dw	12274
  4232                           
  4233                           ;Config register CONFIG2 @ 0x2008
  4234                           ;	Brown-out Reset Selection bit
  4235                           ;	BOR4V = 0x1, unprogrammed default
  4236                           ;	Flash Program Memory Self Write Enable bits
  4237                           ;	WRT = OFF, Write protection off
  4238  2008                     	org	8200
  4239  2008  3FFF               	dw	16383

Data Sizes:
    Strings     183
    Constant    10
    Data        2
    BSS         20
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      59
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 18
		 -> STR_6(CODE[17]), STR_5(CODE[17]), STR_4(CODE[18]), STR_3(CODE[18]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> main@Cadena(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> STR_15(CODE[9]), STR_14(CODE[14]), STR_13(CODE[11]), STR_12(CODE[17]), 
		 -> STR_11(CODE[10]), STR_10(CODE[11]), STR_9(CODE[11]), STR_8(CODE[8]), 
		 -> STR_7(CODE[10]), main@Cadena(BANK0[20]), STR_2(CODE[12]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0    5554
                                             13 BANK0     24    24      0
                        _Apagar_Rojo
                       _Apagar_Verde
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _Leer_tecla
                       _Prender_Rojo
                      _Prender_Verde
                             ___wmul
                             _alarma
                       _pulsar_boton
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1538
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _pulsar_boton                                         2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _alarma                                               5     5      0      46
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     548
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Prender_Verde                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Prender_Rojo                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Leer_tecla                                           2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    1408
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    1520
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Apagar_Verde                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Apagar_Rojo                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Apagar_Rojo
   _Apagar_Verde
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _Leer_tecla
   _Prender_Rojo
   _Prender_Verde
   ___wmul
   _alarma
   _pulsar_boton
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     25      3B       5       73.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      49      12        0.0%
ABS                  0      0      49       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jun 20 19:48:35 2022

                       _X 0053                         _x 0045                         pc 0002  
                      l20 0FCC                        l21 0FD2                        l22 0FD3  
                      l23 0FD9                        l31 0F9F                        l40 02CF  
                      l25 0FDA                        l17 0FC2                        l18 0FC5  
                      l19 0FCB                        l43 0160                        l28 00F3  
                      l37 0272                        l49 01DC                        l90 00D9  
                      l93 0F86                        l96 0F8A                        l99 0F82  
                      _XC 004F                        _XD 0051                        _XM 004D  
                      fsr 0004       ___wmul@multiplicand 0072                       l102 0FB8  
                     l105 00F6                       l107 0129                       l302 0FE7  
                     l304 0FFF                       l153 07E4                       l170 02F5  
                     l138 0633                       l180 0343                       l173 0313  
                     l174 0324                       l183 0361                       l175 031C  
                     l184 0370                       l168 02EC                       l185 0368  
                     l169 02FD                       l178 033A                       l179 034B  
                     l188 0371                       l298 0459                       l574 0220  
                     l584 019A                       _RC0 0038                       _RC1 0039  
                     _RC2 003A                       _RB4 0034                       _RB5 0035  
                     _RD2 0042                       _RB6 0036                       _RD3 0043  
                     _RD4 0044                       _RD5 0045                       _RD6 0046  
                     _RD7 0047                       u700 01F7                       u701 01F6  
                     u630 0FBE                       u631 0FBD                       u640 0FC9  
                     u720 0208                       u800 0196                       u641 0FC8  
                     u721 0207                       u801 0195                       u650 0FD0  
                     u810 0227                       u651 0FCF                       u811 0226  
                     u715 01F8                       u660 0FD7                       u900 02F0  
                     u740 021C                       u661 0FD6                       u901 02EF  
                     u741 021B                       u725 0204                       u830 0250  
                     u910 02F9                       u750 0167                       u831 024F  
                     u911 02F8                       u735 0210                       u751 0166  
                     u920 030E                       u680 01E5                       u825 022F  
                     u921 030D                       u681 01E4                       u850 01A8  
                     u930 0317                       u770 0179                       u675 013B  
                     u931 0316                       u771 0178                       u860 01CA  
                     u940 0320                       u780 0183                       u845 0258  
                     u941 031F                       u781 0182                       u765 016B  
                     u870 01DC                       u950 0335                       u871 01DB  
                     u951 0334                       u695 01E9                       u960 033E  
                     u880 0129                       u961 033D                       u881 0128  
                     u785 017F                       u970 0347                       u890 02E7  
                     u971 0346                       u891 02E6                       u795 018A  
                     u980 035C                       u981 035B                       u885 0125  
                     u990 0365                       u991 0364                       _Try 0057  
                     fsr0 0004                       indf 0000              _pulsar_boton 0FA0  
                    l1300 00F0                      l1310 0149                      l1302 012B  
                    l1400 0296                      l1320 015D                      l1312 014D  
                    l1304 0135                      l1314 0150                      l1306 0138  
                    l1402 019B                      l1410 00D6                      l1330 01EF  
                    l1322 01DD                      l1412 0F83                      l1316 0156  
                    l1308 0146                      l1404 019E                      l1420 0FA3  
                    l1340 020F                      l1332 01F3                      l1324 01DF  
                    l1318 0159                      l1406 01BA                      l1414 0F87  
                    l1430 00F9                      l1422 0FAC                      l1342 0216  
                    l1334 01F7                      l1326 01E5                      l1350 0167  
                    l1510 03F1                      l1502 03C5                      l1416 0F7F  
                    l1408 01C0                      l1440 02E7                      l1432 0106  
                    l1424 00F4                      l1336 0208                      l1328 01E8  
                    l1344 021C                      l1360 0183                      l1352 016A  
                    l1520 0436                      l1512 03F8                      l1600 0505  
                    l1290 0FD7                      l1282 0FBA                      l1370 0F93  
                    l1450 0317                      l1442 02F0                      l1434 011C  
                    l1418 0FA0                      l1338 020E                      l1362 0189  
                    l1354 0171                      l1522 043A                      l1514 03FC  
                    l1506 03E1                      l1610 054A                      l1602 0513  
                    l1284 0FBE                      l1292 00DB                      l1380 0243  
                    l1372 0222                      l1460 0347                      l1452 0320  
                    l1444 02F9                      l1436 02D0                      l1540 0FEE  
                    l1364 0190                      l1356 0175                      l1348 0161  
                    l1516 0401                      l1508 03EB                      l1524 0443  
                    l1700 0724                      l1612 054F                      l1620 058A  
                    l1604 052F                      l1286 0FC9                      l1294 00DE  
                    l1390 026C                      l1374 0227                      l1382 024A  
                    l1462 0356                      l1454 032F                      l1446 0308  
                    l1438 02E1                      l1542 0FF5                      l1534 0FDB  
                    l1358 0179                      l1366 0196                      l1518 042F  
                    l1526 0455                      l1710 0760                      l1702 0732  
                    l1630 05B3                      l1622 0591                      l1614 0557  
                    l1606 0535                      l1288 0FD0                      l1296 00E4  
                    l1392 0273                      l1384 0250                      l1376 0238  
                    l1464 035C                      l1456 0335                      l1448 030E  
                    l1544 0FFB                      l1536 0FDD                      l1480 038C  
                    l1472 0375                      l1712 0765                      l1704 0738  
                    l1640 05F2                      l1632 05BC                      l1624 0596  
                    l1616 0560                      l1608 053A                      l1560 0464  
                    l1552 045A                      l1298 00E7                      l1394 0279  
                    l1386 0261                      l1378 023D                      l1466 0365  
                    l1458 033E                      l1538 0FE1                      l1490 03B6  
                    l1474 037A                      l1730 07B8                      l1714 0771  
                    l1706 0749                      l1650 0626                      l1642 0602  
                    l1634 05CA                      l1626 05A6                      l1618 056E  
                    l1570 0484                      l1562 0465                      l1554 045E  
                    l1396 0282                      l1388 0266                      l1468 036C  
                    l1492 03BA                      l1484 038D                      l1476 0380  
                    l1724 0795                      l1716 077A                      l1708 0752  
                    l1660 0658                      l1652 062C                      l1644 0607  
                    l1628 05AB                      l1636 05E6                      l1580 04B2  
                    l1732 07CD                      l1572 0490                      l1564 046A  
                    l1556 0460                      l1398 0290                      l1494 03BE  
                    l1486 03AA                      l1478 0387                      l1734 07DC  
                    l1726 079E                      l1718 0787                      l1670 067C  
                    l1662 065D                      l1646 060F                      l1638 05ED  
                    l1654 0633                      l1590 04DA                      l1582 04BF  
                    l1574 0499                      l1566 046F                      l1558 0463  
                    l1496 03C3                      l1488 03B2                      l1728 07AF  
                    l1680 06B9                      l1672 0688                      l1664 0662  
                    l1648 0618                      l1592 04DF                      l1584 04C6  
                    l1656 064B                      l1576 049E                      l1568 047B  
                    l1690 06EF                      l1682 06C2                      l1674 0691  
                    l1666 0667                      l1658 0654                      l1594 04EF  
                    l1586 04CD                      l1578 04AD                      l1756 039F  
                    l1692 06F6                      l1684 06D7                      l1668 0673  
                    l1676 06A1                      l1596 04F4                      l1588 04D4  
                    l1694 0707                      l1686 06E5                      l1678 06A8  
                    l1598 04FC                      l1696 0710                      l1688 06ED  
                    l1698 071E                      STR_1 00B9                      STR_2 0082  
                    STR_3 001D                      STR_4 002F                      STR_5 0041  
                    STR_6 0052                      STR_7 00B9                      STR_8 00CC  
                    STR_9 0099                      u1000 036C                      u1001 036B  
                    u1010 0380                      u1011 037F                      u1020 03BA  
                    u1021 03B9                      u1110 0FFB                      u1030 03E0  
                    u1111 0FFA                      u1031 03DF                      u1040 03EB  
                    u1200 06A8                      u1120 04C6                      u1105 0FEF  
                    u1041 03EA                      u1201 06A7                      u1121 04C5  
                    u1050 03F1                      u1210 06F6                      u1130 04CD  
                    u1051 03F0                      u1035 03DC                      u1211 06F5  
                    u1131 04CC                      u1060 0443                      u1220 079E  
                    u1140 04D4                      u1061 0442                      u1221 079D  
                    u1141 04D3                      u1070 0455                      u1230 07DC  
                    u1150 04DA                      u1071 0454                      u1231 07DB  
                    u1151 04D9                      u1080 0FE1                      u1240 07E4  
                    u1160 0535                      u1081 0FE0                      u1241 07E3  
                    u1161 0534                      u1170 0591                      u1235 07D8  
                    u1307 0699                      u1171 0590                      u1180 05ED  
                    u1317 06DF                      u1181 05EC                      u1190 0654  
                    u1407 02DC                      u1095 0FE8                      u1327 0718  
                    u1191 0653                      u1417 0303                      u1337 072C  
                    u1257 04A6                      u1427 032A                      u1347 075A  
                    u1267 050D                      u1437 0351                      u1357 078F  
                    u1277 0568                      u1447 014B                      u1367 0FA7  
                    u1287 05C4                      u1457 015B                      u1377 0FB3  
                    u1297 0620                      u1467 027D                      u1387 00FF  
                    u1477 028C                      u1397 010F                      u1487 029A  
                    u1497 00EB                      _True 0055         ?_Lcd_Write_String 0075  
                    _main 045A                      btemp 007E                      start 0000  
      ??_Lcd_Write_String 0077           __end_of_Lcd_Cmd 00F4                     ?_main 0070  
                   STR_10 00A4                     STR_11 00AF                     STR_12 0063  
                   STR_13 008E                     STR_14 0074                     STR_15 00C3  
         __end_of___lwdiv 0221           __end_of___lwmod 019B                     _PORTB 0006  
                   _PORTC 0007                     _PORTD 0008                     _TRISB 0086  
                   _TRISC 0087                     _TRISD 0088                     _Clave 004B  
                   _Tecla 0049           __end_of_dpowers 001D               _Apagar_Rojo 0F7F  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __end_of_sprintf 045A                _Leer_tecla 02D0          __end_of_Lcd_Init 02D0  
        __end_of_Lcd_Port 0FDB           __initialization 07E7              __end_of_main 07E7  
                  ??_main 002D     __end_of_Prender_Verde 00DA                 ??_Lcd_Cmd 0071  
                  ___wmul 0FDB                    _alarma 00F4                 ??___lwdiv 0074  
               ??___lwmod 007C              _Apagar_Verde 0F83                 ??_sprintf 0023  
         Lcd_Set_Cursor@a 0077           Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0079  
         Lcd_Set_Cursor@z 0078   __end_of__initialization 07FC               ?_Leer_tecla 0070  
       __end_of_Lcd_Clear 0FA0            __pcstackCOMMON 0070              __pidataBANK0 00D4  
          _Lcd_Set_Cursor 0221                 ?_Lcd_Init 0070                 ?_Lcd_Port 0070  
              __pbssBANK0 0045                __pmaintext 045A                   ?___wmul 0070  
                 ?_alarma 0070    __end_of_Lcd_Set_Cursor 0273             ?_Prender_Rojo 0070  
              ??_Lcd_Init 0074                ??_Lcd_Port 0070              ?_Apagar_Rojo 0070  
              __stringtab 0003                   _Bandera 0047            _Lcd_Write_Char 012A  
                 _Lcd_Cmd 00DA                   ___lwdiv 01DD                   ___lwmod 0161  
          ??_Prender_Rojo 0070           ?_Lcd_Set_Cursor 0074                   __ptext1 0372  
                 __ptext2 0161                   __ptext3 01DD                   __ptext4 0FA0  
                 __ptext5 00F4                   __ptext6 0FDB                   __ptext7 00D6  
                 __ptext8 0F87                   __ptext9 02D0                   _dpowers 0013  
                 alarma@a 0073                   _sprintf 0372                   clrloop0 0F8C  
  __end_of_Lcd_Write_Char 0161      end_of_initialization 07FC                 Lcd_Port@a 0070  
              main@Cadena 0031           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075  
       Lcd_Write_String@i 007A              ??_Leer_tecla 0070                 _Lcd_Clear 0F93  
          __end_of___wmul 1000            __end_of_alarma 012A          _Lcd_Write_String 019B  
      __end_of_Leer_tecla 0372       start_initialization 07E7             ?_pulsar_boton 0070  
    __end_of_Prender_Rojo 0F8B                ?_Lcd_Clear 0070                  ??___wmul 0074  
                ??_alarma 0070               __pdataBANK0 0059           Lcd_Write_Char@a 0074  
         Lcd_Write_Char@y 0073                 ___latbits 0002            ??_pulsar_boton 0070  
           __pcstackBANK0 0020             _Prender_Verde 00D6                  ?_Lcd_Cmd 0070  
             sprintf@flag 0027               sprintf@prec 0028          ___lwdiv@dividend 0072  
        ??_Lcd_Set_Cursor 0075                  ?___lwdiv 0070                  ?___lwmod 0078  
               __pstrings 0003            ?_Prender_Verde 0070          ___lwdiv@quotient 0075  
                ?_sprintf 0020            ___wmul@product 0074                 clear_ram0 0F8B  
                Lcd_Cmd@a 0073               ??_Lcd_Clear 0074             ?_Apagar_Verde 0070  
             __stringbase 0012         ___wmul@multiplier 0070          ??_Lcd_Write_Char 0071  
                _Lcd_Init 0273                  _Lcd_Port 0FB9  __end_of_Lcd_Write_String 01DD  
                _Password 0059      __end_of_pulsar_boton 0FB9            ??_Apagar_Verde 0070  
      __end_of__stringtab 0013              _Prender_Rojo 0F87                sprintf@val 0029  
         ??_Prender_Verde 0070           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 019B                  __ptext11 012A                  __ptext12 0221  
                __ptext13 0273                  __ptext14 0F93                  __ptext15 00DA  
                __ptext16 0FB9                  __ptext17 0F83                  __ptext18 0F7F  
           ??_Apagar_Rojo 0070        Lcd_Write_Char@temp 0072                 sprintf@ap 0026  
               sprintf@sp 002B          ___lwmod@dividend 007A                 stringcode 000D  
      Lcd_Set_Cursor@temp 007A                  sprintf@c 002C                  sprintf@f 0020  
         ___lwmod@divisor 0078           ___lwmod@counter 007D                  stringdir 000D  
                stringtab 0003      __end_of_Apagar_Verde 0F87       __end_of_Apagar_Rojo 0F83  
